!RBIX
4472690874163217065
18
M
1
n
n
x
10
__script__
i
272
5
7
0
64
47
49
1
1
15
5
7
2
64
47
49
1
1
15
45
3
4
4
100
49
5
1
15
5
45
6
7
47
49
8
1
15
99
7
9
7
10
65
67
49
11
0
49
12
4
15
45
13
14
49
15
0
19
0
15
45
3
16
13
71
17
47
9
83
47
49
18
0
13
7
19
64
47
49
20
1
15
8
89
7
19
64
49
17
1
19
1
15
45
3
21
13
71
17
47
9
116
47
49
18
0
13
7
22
64
47
49
20
1
15
8
122
7
22
64
49
17
1
19
2
15
5
20
0
47
49
9
1
19
3
78
85
23
9
268
35
0
19
4
15
35
0
19
5
15
35
0
19
6
15
20
0
78
49
24
1
9
188
5
7
25
64
47
49
26
1
15
44
43
27
78
20
3
2
49
17
3
56
28
50
29
0
8
212
5
7
30
64
47
49
26
1
15
44
43
27
78
20
3
2
49
17
3
56
31
50
29
0
15
5
20
4
20
6
5
20
4
20
3
20
1
20
2
47
49
32
4
20
1
47
49
33
4
19
10
15
5
7
34
64
47
49
26
1
15
44
43
27
78
20
3
2
49
17
3
56
35
50
29
0
15
68
8
125
1
15
2
11
I
13
I
b
I
0
I
0
I
0
n
p
36
s
10
bigdecimal
x
7
require
s
17
bigdecimal/ludcmp
x
10
BigDecimal
n
x
5
limit
x
7
LUSolve
n
x
7
include
x
8
rd_order
M
1
n
n
x
8
rd_order
i
32
20
0
78
49
0
1
9
18
5
7
1
64
47
49
2
1
8
19
1
15
45
3
4
49
5
0
49
6
0
19
1
11
I
4
I
2
I
1
I
0
I
1
n
p
7
x
2
<=
s
21
Number of equations ?
x
6
printf
x
4
ARGF
n
x
4
gets
x
4
to_i
p
9
I
-1
I
17
I
0
I
18
I
13
I
0
I
14
I
19
I
20
x
35
lib/ext/bigdecimal/sample/linear.rb
p
2
x
2
na
x
1
n
x
17
method_visibility
x
15
add_defn_method
x
4
ARGV
n
x
4
size
n
x
3
new
x
8
allocate
s
3
0.0
x
10
initialize
n
s
3
1.0
x
1
>
x
2
<=
s
41

Enter coefficient matrix element A[i,j]

x
6
printf
x
5
Range
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
77
57
22
1
7
15
44
43
0
78
21
1
3
2
49
1
3
56
2
50
3
0
15
5
7
4
64
21
1
7
47
49
5
2
15
21
1
6
45
6
7
13
71
1
47
9
64
47
49
8
0
13
45
9
10
49
11
0
47
49
12
1
15
8
73
45
9
13
49
11
0
49
1
1
49
14
1
11
I
5
I
0
I
1
I
0
I
1
n
p
15
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
104
57
22
2
8
15
5
7
0
64
21
2
7
21
2
8
47
49
1
3
15
45
2
3
49
4
0
22
2
9
15
21
2
4
45
5
6
13
71
7
47
9
57
47
49
8
0
13
21
2
9
47
49
9
1
15
8
63
21
2
9
49
7
1
49
10
1
15
21
2
5
45
5
11
13
71
7
47
9
94
47
49
8
0
13
21
2
9
47
49
9
1
15
8
100
21
2
9
49
7
1
49
10
1
11
I
5
I
0
I
1
I
0
I
1
n
p
12
s
10
A[%d,%d]? 
x
6
printf
x
4
ARGF
n
x
4
gets
x
10
BigDecimal
n
x
3
new
x
8
allocate
x
10
initialize
x
2
<<
n
p
9
I
0
I
28
I
5
I
29
I
1e
I
2a
I
43
I
2b
I
68
x
35
lib/ext/bigdecimal/sample/linear.rb
p
0
x
4
each
s
33
Contatant vector element b[%d] ? 
x
6
printf
x
10
BigDecimal
n
x
8
allocate
x
4
ARGF
n
x
4
gets
x
10
initialize
n
x
2
<<
p
7
I
0
I
27
I
5
I
28
I
16
I
2d
I
4d
x
35
lib/ext/bigdecimal/sample/linear.rb
p
0
x
4
each
s
40
Coefficient matrix and constant vector.

M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
106
57
22
1
7
15
45
0
1
49
2
0
22
1
9
15
5
7
3
64
21
1
7
21
1
9
47
49
4
3
15
21
1
9
49
5
0
22
1
9
15
44
43
6
78
21
1
3
2
49
7
3
56
8
50
9
0
15
21
1
6
45
10
11
13
71
7
47
9
90
47
49
12
0
13
21
1
9
21
1
3
49
13
1
47
49
14
1
15
8
102
21
1
9
21
1
3
49
13
1
49
7
1
49
15
1
11
I
6
I
0
I
1
I
0
I
1
n
p
16
x
4
ARGF
n
x
4
gets
s
6
%d) %s
x
6
printf
x
5
split
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
103
57
22
2
8
15
21
2
4
45
0
1
13
71
2
47
9
38
47
49
3
0
13
21
2
9
21
2
8
49
4
1
47
49
5
1
15
8
50
21
2
9
21
2
8
49
4
1
49
2
1
49
6
1
15
21
2
5
45
0
7
13
71
2
47
9
87
47
49
3
0
13
21
2
9
21
2
8
49
4
1
47
49
5
1
15
8
99
21
2
9
21
2
8
49
4
1
49
2
1
49
6
1
11
I
6
I
0
I
1
I
0
I
1
n
p
8
x
10
BigDecimal
n
x
3
new
x
8
allocate
x
2
[]
x
10
initialize
x
2
<<
n
p
7
I
0
I
36
I
5
I
37
I
36
I
38
I
67
x
35
lib/ext/bigdecimal/sample/linear.rb
p
0
x
4
each
x
10
BigDecimal
n
x
8
allocate
x
2
[]
x
10
initialize
x
2
<<
p
13
I
0
I
32
I
5
I
33
I
f
I
34
I
1e
I
35
I
28
I
36
I
39
I
3a
I
6a
x
35
lib/ext/bigdecimal/sample/linear.rb
p
0
x
8
ludecomp
x
7
lusolve
s
34
Answer(x[i] & (A*x-b)[i]) follows

M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
79
57
22
1
7
15
5
7
0
64
21
1
7
21
1
10
21
1
7
49
1
1
49
2
0
47
49
3
3
15
21
1
1
22
1
9
15
44
43
4
78
21
1
3
2
49
5
3
56
6
50
7
0
15
5
7
8
64
21
1
9
21
1
6
21
1
7
49
1
1
82
9
49
2
0
47
49
3
2
11
I
6
I
0
I
1
I
0
I
1
n
p
10
s
9
x[%d]=%s 
x
2
[]
x
4
to_s
x
6
printf
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
9
__block__
i
46
57
22
2
8
15
21
2
9
21
2
5
21
2
7
21
2
3
49
0
1
21
2
8
81
1
49
2
1
21
2
10
21
2
8
49
2
1
49
0
1
81
1
22
2
9
11
I
5
I
0
I
1
I
0
I
1
n
p
3
x
1
*
x
1
+
x
2
[]
p
5
I
0
I
42
I
5
I
43
I
2e
x
35
lib/ext/bigdecimal/sample/linear.rb
p
0
x
4
each
s
6
 & %s

x
1
-
p
11
I
0
I
3f
I
5
I
40
I
1d
I
41
I
24
I
42
I
35
I
45
I
4f
x
35
lib/ext/bigdecimal/sample/linear.rb
p
0
p
45
I
0
I
d
I
9
I
e
I
12
I
13
I
1b
I
16
I
24
I
17
I
32
I
1c
I
3b
I
1d
I
5c
I
1e
I
7d
I
20
I
8b
I
21
I
90
I
22
I
95
I
23
I
9a
I
24
I
a2
I
26
I
ab
I
27
I
bc
I
31
I
c5
I
32
I
d4
I
0
I
d5
I
3d
I
f0
I
3e
I
f9
I
3f
I
10c
I
0
I
110
x
35
lib/ext/bigdecimal/sample/linear.rb
p
11
x
2
na
x
4
zero
x
3
one
x
1
n
x
1
a
x
2
as
x
1
b
x
1
i
x
1
j
x
1
s
x
1
x
