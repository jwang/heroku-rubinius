!RBIX
4472690874163217065
18
M
1
n
n
x
10
__script__
i
166
99
65
49
0
0
7
1
49
2
2
15
5
7
3
64
47
49
4
1
15
45
5
6
7
7
64
49
8
1
9
34
1
8
90
99
7
5
1
65
49
9
3
13
99
12
7
10
12
7
11
12
65
12
49
12
4
15
49
10
0
15
45
13
14
99
43
15
12
49
16
1
13
99
12
7
17
12
7
18
12
65
12
49
12
4
15
54
50
17
0
15
99
7
19
1
65
49
9
3
13
99
12
7
10
12
7
20
12
65
12
49
12
4
15
49
10
0
15
99
43
21
7
22
49
23
1
65
49
24
0
83
25
9
162
5
45
26
27
49
28
0
1
99
43
21
7
22
49
23
1
7
29
4
4
81
30
47
49
31
4
8
163
1
15
2
11
I
6
I
0
I
0
I
0
I
0
n
p
32
x
9
data_path
I
3a65
x
8
set_data
s
6
socket
x
7
require
x
6
Socket
n
s
8
AF_INET6
x
14
const_defined?
x
10
open_class
x
14
__class_init__
M
1
n
n
x
6
Socket
i
33
5
66
65
7
0
45
1
2
13
71
3
47
9
26
47
49
4
0
13
47
49
5
0
15
8
29
49
3
0
49
6
2
11
I
4
I
0
I
0
I
0
I
0
n
p
7
x
8
AF_INET6
x
6
Object
n
x
3
new
x
8
allocate
x
10
initialize
x
9
const_set
p
3
I
2
I
16
I
21
x
13
lib/ipaddr.rb
p
0
x
13
attach_method
x
8
IPSocket
n
x
4
Type
x
22
object_singleton_class
x
18
__metaclass_init__
M
1
n
n
x
18
__metaclass_init__
i
68
5
66
99
7
0
7
1
65
67
49
2
0
49
3
4
15
99
7
4
7
5
65
67
49
2
0
49
3
4
15
99
7
6
7
7
65
67
49
2
0
49
3
4
15
65
7
8
7
9
47
49
10
2
15
99
7
9
7
11
65
67
49
2
0
49
3
4
11
I
5
I
0
I
0
I
0
I
0
n
p
12
x
9
valid_v4?
M
1
n
n
x
9
valid_v4?
i
46
7
0
13
70
9
18
15
44
43
1
7
2
78
49
3
2
6
0
20
0
49
4
1
9
41
78
78
98
5
2
49
6
0
56
7
50
8
0
11
8
42
1
15
3
11
11
I
4
I
1
I
1
I
0
I
1
n
p
9
n
x
6
Regexp
s
46
\A(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\Z
x
3
new
x
2
=~
x
24
regexp_last_match_result
x
8
captures
M
1
p
2
x
9
for_block
t
n
x
9
valid_v4?
i
14
57
19
0
15
20
0
49
0
0
7
1
84
2
11
I
4
I
1
I
1
I
0
I
1
n
p
3
x
4
to_i
I
100
x
1
<
p
3
I
0
I
1c
I
e
x
13
lib/ipaddr.rb
p
1
x
1
i
x
4
all?
p
13
I
-1
I
1a
I
0
I
1b
I
19
I
1c
I
29
I
1b
I
2a
I
0
I
2b
I
1e
I
2e
x
13
lib/ipaddr.rb
p
1
x
4
addr
x
17
method_visibility
x
15
add_defn_method
x
9
valid_v6?
M
1
n
n
x
9
valid_v6?
i
233
7
0
13
70
9
18
15
44
43
1
7
2
78
49
3
2
6
0
20
0
49
4
1
9
29
2
11
8
30
1
15
7
5
13
70
9
49
15
44
43
1
7
6
78
49
3
2
6
5
20
0
49
4
1
9
60
2
11
8
61
1
15
7
7
13
70
9
80
15
44
43
1
7
8
78
49
3
2
6
7
20
0
49
4
1
9
91
2
11
8
92
1
15
7
9
13
70
9
111
15
44
43
1
7
10
78
49
3
2
6
9
20
0
49
4
1
13
9
131
15
5
4
3
78
98
11
2
47
49
12
1
9
137
2
11
8
138
1
15
7
13
13
70
9
157
15
44
43
1
7
14
78
49
3
2
6
13
20
0
49
4
1
13
9
177
15
5
4
3
78
98
11
2
47
49
12
1
9
183
2
11
8
184
1
15
7
15
13
70
9
203
15
44
43
1
7
16
78
49
3
2
6
15
20
0
49
4
1
13
9
223
15
5
4
3
78
98
11
2
47
49
12
1
9
229
2
11
8
230
1
15
3
11
I
4
I
1
I
1
I
0
I
1
n
p
17
n
x
6
Regexp
s
38
\A[\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*\Z
x
3
new
x
2
=~
n
s
77
\A[\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*::([\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*)?\Z
n
s
43
\A::([\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*)?\Z
n
s
37
\A[\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*:
x
24
regexp_last_match_result
x
9
valid_v4?
n
s
76
\A[\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*::([\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*:)?
n
s
42
\A::([\dA-Fa-f]{1,4}(:[\dA-Fa-f]{1,4})*:)?
p
29
I
-1
I
21
I
0
I
23
I
1e
I
0
I
1f
I
24
I
3d
I
0
I
3e
I
25
I
5c
I
0
I
5d
I
27
I
8a
I
0
I
8b
I
28
I
b8
I
0
I
b9
I
29
I
e6
I
0
I
e7
I
2b
I
e9
x
13
lib/ipaddr.rb
p
1
x
4
addr
x
6
valid?
M
1
n
n
x
6
valid?
i
19
5
20
0
47
49
0
1
13
10
18
15
5
20
0
47
49
1
1
11
I
3
I
1
I
1
I
0
I
1
n
p
2
x
9
valid_v4?
x
9
valid_v6?
p
5
I
-1
I
2e
I
0
I
2f
I
13
x
13
lib/ipaddr.rb
p
1
x
4
addr
x
15
getaddress_orig
x
10
getaddress
x
12
alias_method
M
1
n
n
x
10
getaddress
i
59
5
20
0
47
49
0
1
9
13
20
0
8
58
7
1
13
70
9
31
15
44
43
2
7
3
78
49
4
2
6
1
20
0
49
5
1
9
47
5
20
0
47
49
6
1
8
58
5
45
7
8
7
9
64
47
49
10
2
11
I
4
I
1
I
1
I
0
I
1
n
p
11
x
6
valid?
n
x
6
Regexp
s
17
\A[-A-Za-z\d.]+\Z
x
3
new
x
2
=~
x
15
getaddress_orig
x
13
ArgumentError
n
s
15
invalid address
x
5
raise
p
15
I
-1
I
33
I
0
I
34
I
9
I
35
I
d
I
36
I
26
I
37
I
2f
I
39
I
3a
I
0
I
3b
x
13
lib/ipaddr.rb
p
1
x
1
s
p
11
I
2
I
1a
I
10
I
21
I
1e
I
2e
I
2c
I
32
I
36
I
33
I
44
x
13
lib/ipaddr.rb
p
0
x
6
IPAddr
M
1
n
n
x
6
IPAddr
i
594
5
66
65
7
0
7
1
49
2
2
15
65
7
3
7
4
49
2
2
15
65
7
5
7
6
64
35
1
4
8
49
7
1
7
8
64
49
9
1
49
2
2
15
5
7
10
47
49
11
1
15
99
7
12
7
13
65
45
14
15
49
16
4
15
99
7
17
7
18
65
45
14
19
49
16
4
15
99
7
20
7
21
65
67
49
22
0
49
23
4
15
99
7
24
7
25
65
67
49
22
0
49
23
4
15
99
7
26
7
27
65
67
49
22
0
49
23
4
15
99
7
28
7
29
65
67
49
22
0
49
23
4
15
99
7
30
7
31
65
67
49
22
0
49
23
4
15
99
7
32
7
33
65
67
49
22
0
49
23
4
15
99
7
34
7
35
65
67
49
22
0
49
23
4
15
99
7
36
7
37
65
67
49
22
0
49
23
4
15
65
7
38
7
36
47
49
39
2
15
99
7
40
7
41
65
67
49
22
0
49
23
4
15
99
7
42
7
43
65
67
49
22
0
49
23
4
15
99
7
44
7
45
65
67
49
22
0
49
23
4
15
99
7
46
7
47
65
67
49
22
0
49
23
4
15
99
7
48
7
49
65
67
49
22
0
49
23
4
15
99
7
50
7
51
65
67
49
22
0
49
23
4
15
99
7
52
7
53
65
67
49
22
0
49
23
4
15
99
7
54
7
55
65
67
49
22
0
49
23
4
15
99
7
56
7
57
65
67
49
22
0
49
23
4
15
99
7
58
7
59
65
67
49
22
0
49
23
4
15
99
7
60
7
61
65
67
49
22
0
49
23
4
15
99
7
62
7
63
65
67
49
22
0
49
23
4
15
99
7
64
7
65
65
67
49
22
0
49
23
4
15
99
7
66
7
67
65
67
49
22
0
49
23
4
15
99
7
68
7
69
65
67
49
22
0
49
23
4
15
99
7
70
7
71
65
67
49
22
0
49
23
4
15
5
45
72
73
47
49
74
1
15
99
7
75
7
76
65
67
49
22
0
49
23
4
15
99
7
77
7
78
65
67
49
22
0
49
23
4
15
5
48
79
15
99
7
80
7
81
65
67
49
22
0
49
23
4
15
99
7
82
7
83
65
67
49
22
0
49
23
4
15
5
48
84
15
99
7
85
7
86
65
67
49
22
0
49
23
4
15
99
7
87
7
88
65
67
49
22
0
49
23
4
15
99
7
89
7
90
65
67
49
22
0
49
23
4
15
99
7
91
7
92
65
67
49
22
0
49
23
4
15
99
7
93
7
94
65
67
49
22
0
49
23
4
15
99
7
95
7
96
65
67
49
22
0
49
23
4
15
99
7
97
7
98
65
67
49
22
0
49
23
4
11
I
5
I
0
I
0
I
0
I
0
n
p
99
x
7
IN4MASK
I
ffffffff
x
9
const_set
x
7
IN6MASK
I
ffffffffffffffffffffffffffffffff
x
9
IN6FORMAT
s
4
%.4x
x
1
*
s
1
:
x
4
join
x
6
family
x
4
attr
x
8
new_ntoh
M
1
n
n
x
8
new_ntoh
i
42
45
0
1
13
71
2
47
9
29
47
49
3
0
13
45
0
4
20
0
49
5
1
47
49
6
1
15
8
40
45
0
7
20
0
49
5
1
49
2
1
11
11
I
5
I
1
I
1
I
0
I
1
n
p
8
x
6
IPAddr
n
x
3
new
x
8
allocate
n
x
4
ntop
x
10
initialize
n
p
5
I
-1
I
5f
I
0
I
60
I
2a
x
13
lib/ipaddr.rb
p
1
x
4
addr
x
6
IPAddr
n
x
13
attach_method
x
4
ntop
M
1
n
n
x
4
ntop
i
78
20
0
49
0
0
13
4
4
12
49
1
1
9
33
15
20
0
7
2
64
49
3
1
7
4
64
49
5
1
19
1
8
73
13
4
16
12
49
1
1
9
61
15
45
6
7
20
0
7
8
64
49
3
1
49
9
1
19
1
8
73
15
5
45
10
11
7
12
64
47
49
13
2
15
20
1
11
11
I
5
I
2
I
1
I
0
I
1
n
p
14
x
4
size
x
3
===
s
2
C4
x
6
unpack
s
1
.
x
4
join
x
9
IN6FORMAT
n
s
2
n8
x
1
%
x
13
ArgumentError
n
s
26
unsupported address family
x
5
raise
p
19
I
-1
I
65
I
0
I
66
I
5
I
67
I
f
I
68
I
21
I
69
I
2b
I
6a
I
3e
I
6c
I
49
I
0
I
4a
I
6e
I
4e
x
13
lib/ipaddr.rb
p
2
x
4
addr
x
1
s
n
x
1
&
M
1
n
n
x
1
&
i
24
5
49
0
0
39
1
5
20
0
47
49
2
1
49
3
0
49
4
1
49
5
1
11
11
I
5
I
1
I
1
I
0
I
1
n
p
6
x
5
clone
x
5
@addr
x
12
coerce_other
x
4
to_i
x
1
&
x
3
set
p
5
I
-1
I
72
I
0
I
73
I
18
x
13
lib/ipaddr.rb
p
1
x
5
other
x
17
method_visibility
x
15
add_defn_method
x
1
|
M
1
n
n
x
1
|
i
24
5
49
0
0
39
1
5
20
0
47
49
2
1
49
3
0
49
4
1
49
5
1
11
11
I
5
I
1
I
1
I
0
I
1
n
p
6
x
5
clone
x
5
@addr
x
12
coerce_other
x
4
to_i
x
1
|
x
3
set
p
5
I
-1
I
77
I
0
I
78
I
18
x
13
lib/ipaddr.rb
p
1
x
5
other
x
2
>>
M
1
n
n
x
2
>>
i
16
5
49
0
0
39
1
20
0
49
2
1
49
3
1
11
11
I
4
I
1
I
1
I
0
I
1
n
p
4
x
5
clone
x
5
@addr
x
2
>>
x
3
set
p
5
I
-1
I
7c
I
0
I
7d
I
10
x
13
lib/ipaddr.rb
p
1
x
3
num
x
2
<<
M
1
n
n
x
2
<<
i
21
5
49
0
0
5
39
1
20
0
49
2
1
47
49
3
1
49
4
1
11
11
I
5
I
1
I
1
I
0
I
1
n
p
5
x
5
clone
x
5
@addr
x
2
<<
x
9
addr_mask
x
3
set
p
5
I
-1
I
81
I
0
I
82
I
15
x
13
lib/ipaddr.rb
p
1
x
3
num
x
1
~
M
1
n
n
x
1
~
i
19
5
49
0
0
5
39
1
49
2
0
47
49
3
1
49
4
1
11
11
I
3
I
0
I
0
I
0
I
0
n
p
5
x
5
clone
x
5
@addr
x
1
~
x
9
addr_mask
x
3
set
p
5
I
-1
I
86
I
0
I
87
I
13
x
13
lib/ipaddr.rb
p
0
x
2
==
M
1
n
n
x
2
==
i
34
5
20
0
47
49
0
1
19
0
15
39
1
20
0
49
2
0
83
3
13
9
32
15
39
4
20
0
49
5
0
83
3
11
11
I
3
I
1
I
1
I
0
I
1
n
p
6
x
12
coerce_other
x
7
@family
x
6
family
x
2
==
x
5
@addr
x
4
to_i
p
7
I
-1
I
8b
I
0
I
8c
I
a
I
8d
I
22
x
13
lib/ipaddr.rb
p
1
x
5
other
x
4
mask
M
1
n
n
x
4
mask
i
11
5
49
0
0
20
0
49
1
1
11
11
I
3
I
1
I
1
I
0
I
1
n
p
2
x
5
clone
x
5
mask!
p
5
I
-1
I
92
I
0
I
93
I
b
x
13
lib/ipaddr.rb
p
1
x
9
prefixlen
x
8
include?
M
1
n
n
x
8
include?
i
160
5
20
0
47
49
0
1
19
0
15
5
47
49
1
0
9
67
39
2
4
32
49
3
1
7
4
83
5
9
33
1
8
35
3
11
15
39
2
45
6
7
49
8
1
19
1
15
39
9
45
6
10
49
8
1
19
2
15
45
11
12
43
13
19
3
8
81
39
2
19
1
15
39
9
19
2
15
39
14
19
3
15
20
0
49
1
0
9
112
20
0
49
15
0
45
6
16
49
8
1
19
4
15
45
11
17
43
13
19
5
8
127
20
0
49
15
0
19
4
15
20
0
49
18
0
19
5
15
20
3
20
5
83
5
9
139
1
8
141
3
11
15
20
2
20
1
49
8
1
20
4
20
1
49
8
1
83
5
11
11
I
9
I
6
I
1
I
0
I
1
n
p
19
x
12
coerce_other
x
12
ipv4_mapped?
x
10
@mask_addr
x
2
>>
I
ffffffffffffffffffffffff
x
2
==
x
7
IN4MASK
n
x
1
&
x
5
@addr
n
x
6
Socket
n
x
7
AF_INET
x
7
@family
x
4
to_i
n
n
x
6
family
p
47
I
-1
I
9f
I
0
I
a0
I
a
I
a1
I
11
I
a2
I
21
I
a3
I
23
I
0
I
24
I
a5
I
2f
I
a6
I
3a
I
a7
I
43
I
a9
I
48
I
aa
I
4d
I
ab
I
51
I
0
I
52
I
ad
I
59
I
ae
I
67
I
af
I
70
I
b1
I
78
I
b2
I
7f
I
0
I
80
I
b5
I
8b
I
b6
I
8d
I
0
I
8e
I
b8
I
a0
x
13
lib/ipaddr.rb
p
6
x
5
other
x
9
mask_addr
x
4
addr
x
6
family
x
10
other_addr
x
12
other_family
x
3
===
x
12
alias_method
x
4
to_i
M
1
n
n
x
4
to_i
i
4
39
0
11
11
I
1
I
0
I
0
I
0
I
0
n
p
1
x
5
@addr
p
5
I
-1
I
bd
I
0
I
be
I
4
x
13
lib/ipaddr.rb
p
0
x
4
to_s
M
1
n
n
x
4
to_s
i
186
5
48
0
19
0
15
5
47
49
1
0
9
18
20
0
11
8
19
1
15
20
0
7
2
13
70
9
40
15
44
43
3
7
4
79
49
5
2
6
2
7
6
64
49
7
2
15
5
56
8
47
50
9
0
15
20
0
7
10
13
70
9
75
15
44
43
3
7
11
78
49
5
2
6
10
7
12
64
49
13
2
15
7
14
13
70
9
100
15
44
43
3
7
15
79
49
5
2
6
14
20
0
49
16
1
9
181
5
7
17
64
4
5
78
98
18
2
4
5
79
98
18
2
49
19
0
7
20
49
21
1
4
5
79
98
18
2
49
19
0
7
20
49
22
1
4
5
80
98
18
2
49
19
0
7
20
49
21
1
4
5
80
98
18
2
49
19
0
7
20
49
22
1
47
49
23
6
19
0
8
182
1
15
20
0
11
I
9
I
1
I
0
I
0
I
0
n
p
24
x
9
to_string
x
5
ipv4?
n
x
6
Regexp
s
20
\b0{1,3}([\da-f]+)\b
x
3
new
s
2
\1
x
5
gsub!
M
1
p
2
x
9
for_block
t
n
x
4
to_s
i
248
21
1
0
7
0
13
70
9
21
15
44
43
1
7
2
78
49
3
2
6
0
7
4
64
49
5
2
9
33
1
33
8
34
1
15
21
1
0
7
6
13
70
9
56
15
44
43
1
7
7
78
49
3
2
6
6
7
8
64
49
5
2
9
68
1
33
8
69
1
15
21
1
0
7
9
13
70
9
91
15
44
43
1
7
10
78
49
3
2
6
9
7
8
64
49
5
2
9
103
1
33
8
104
1
15
21
1
0
7
11
13
70
9
126
15
44
43
1
7
12
78
49
3
2
6
11
7
8
64
49
5
2
9
138
1
33
8
139
1
15
21
1
0
7
13
13
70
9
161
15
44
43
1
7
14
78
49
3
2
6
13
7
8
64
49
5
2
9
173
1
33
8
174
1
15
21
1
0
7
15
13
70
9
196
15
44
43
1
7
16
78
49
3
2
6
15
7
8
64
49
5
2
9
208
1
33
8
209
1
15
21
1
0
7
17
13
70
9
231
15
44
43
1
7
18
78
49
3
2
6
17
7
8
64
49
5
2
9
243
1
33
8
244
1
15
1
33
11
I
5
I
0
I
0
I
0
I
0
I
-2
p
19
n
x
6
Regexp
s
19
\A0:0:0:0:0:0:0:0\Z
x
3
new
s
2
::
x
4
sub!
n
s
17
\b0:0:0:0:0:0:0\b
s
1
:
n
s
15
\b0:0:0:0:0:0\b
n
s
13
\b0:0:0:0:0\b
n
s
11
\b0:0:0:0\b
n
s
9
\b0:0:0\b
n
s
7
\b0:0\b
p
31
I
0
I
c8
I
22
I
0
I
23
I
c9
I
45
I
0
I
46
I
ca
I
68
I
0
I
69
I
cb
I
8b
I
0
I
8c
I
cc
I
ae
I
0
I
af
I
cd
I
d1
I
0
I
d2
I
ce
I
f4
I
0
I
f5
I
cf
I
f8
x
13
lib/ipaddr.rb
p
0
x
4
loop
n
s
5
:{3,}
s
2
::
x
4
sub!
n
s
43
\A::(ffff:)?([\da-f]{1,4}):([\da-f]{1,4})\Z
x
2
=~
s
15
::%s%d.%d.%d.%d
x
24
regexp_last_match_result
x
3
hex
I
100
x
1
/
x
1
%
x
7
sprintf
p
25
I
-1
I
c2
I
0
I
c3
I
6
I
c4
I
13
I
0
I
14
I
c6
I
2f
I
c7
I
37
I
d1
I
52
I
d3
I
6b
I
d4
I
b5
I
d3
I
b6
I
0
I
b7
I
d7
I
ba
x
13
lib/ipaddr.rb
p
1
x
3
str
x
9
to_string
M
1
n
n
x
9
to_string
i
9
5
39
0
47
49
1
1
11
11
I
2
I
0
I
0
I
0
I
0
n
p
2
x
5
@addr
x
10
_to_string
p
5
I
-1
I
dc
I
0
I
dd
I
9
x
13
lib/ipaddr.rb
p
0
x
4
hton
M
1
n
n
x
4
hton
i
74
39
0
13
45
1
2
43
3
12
49
4
1
9
28
15
39
5
35
1
7
6
64
49
7
1
11
8
73
13
45
1
8
43
9
12
49
4
1
9
64
15
44
43
10
78
4
7
49
11
2
56
12
50
13
0
7
14
64
49
7
1
11
8
73
15
5
7
15
64
47
49
16
1
11
I
3
I
0
I
0
I
0
I
0
n
p
17
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
5
@addr
s
1
N
x
4
pack
n
x
8
AF_INET6
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
4
hton
i
26
57
19
0
15
39
0
4
112
4
16
20
0
49
1
1
82
2
49
3
1
7
4
49
5
1
11
I
6
I
1
I
1
I
0
I
1
n
p
6
x
5
@addr
x
1
*
x
1
-
x
2
>>
I
ffff
x
1
&
p
5
I
0
I
e6
I
4
I
e7
I
1a
x
13
lib/ipaddr.rb
p
1
x
1
i
x
3
map
s
2
n8
s
26
unsupported address family
x
5
raise
p
21
I
-1
I
e1
I
0
I
e2
I
2
I
e3
I
f
I
e4
I
1c
I
e5
I
29
I
e6
I
37
I
e8
I
3a
I
e6
I
41
I
ea
I
49
I
0
I
4a
x
13
lib/ipaddr.rb
p
0
x
5
ipv4?
M
1
n
n
x
5
ipv4?
i
11
39
0
45
1
2
43
3
83
4
11
11
I
2
I
0
I
0
I
0
I
0
n
p
5
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
2
==
p
5
I
-1
I
ef
I
0
I
f0
I
b
x
13
lib/ipaddr.rb
p
0
x
5
ipv6?
M
1
n
n
x
5
ipv6?
i
11
39
0
45
1
2
43
3
83
4
11
11
I
2
I
0
I
0
I
0
I
0
n
p
5
x
7
@family
x
6
Socket
n
x
8
AF_INET6
x
2
==
p
5
I
-1
I
f4
I
0
I
f5
I
b
x
13
lib/ipaddr.rb
p
0
x
12
ipv4_mapped?
M
1
n
n
x
12
ipv4_mapped?
i
22
5
47
49
0
0
13
9
20
15
39
1
4
32
49
2
1
7
3
83
4
11
11
I
2
I
0
I
0
I
0
I
0
n
p
5
x
5
ipv6?
x
5
@addr
x
2
>>
I
ffff
x
2
==
p
5
I
-1
I
f9
I
0
I
fa
I
16
x
13
lib/ipaddr.rb
p
0
x
12
ipv4_compat?
M
1
n
n
x
12
ipv4_compat?
i
78
5
47
49
0
0
10
10
2
8
11
3
13
10
31
15
39
1
4
32
49
2
1
78
83
3
10
30
2
8
31
3
9
37
3
11
8
38
1
15
39
1
45
4
5
49
6
1
19
0
15
20
0
78
83
3
10
60
2
8
61
3
13
9
76
15
20
0
79
83
3
10
75
2
8
76
3
11
11
I
3
I
1
I
0
I
0
I
0
n
p
7
x
5
ipv6?
x
5
@addr
x
2
>>
x
2
==
x
7
IN4MASK
n
x
1
&
p
15
I
-1
I
fe
I
0
I
ff
I
21
I
100
I
25
I
ff
I
26
I
0
I
27
I
102
I
32
I
103
I
4e
x
13
lib/ipaddr.rb
p
1
x
1
a
x
11
ipv4_mapped
M
1
n
n
x
11
ipv4_mapped
i
43
5
47
49
0
0
9
10
1
8
21
5
45
1
2
7
3
64
47
49
4
2
15
5
49
5
0
39
6
7
7
49
8
1
45
9
10
43
11
49
12
2
11
11
I
3
I
0
I
0
I
0
I
0
n
p
13
x
5
ipv4?
x
13
ArgumentError
n
s
19
not an IPv4 address
x
5
raise
x
5
clone
x
5
@addr
I
ffff00000000
x
1
|
x
6
Socket
n
x
8
AF_INET6
x
3
set
p
11
I
-1
I
108
I
0
I
109
I
a
I
10a
I
15
I
0
I
16
I
10c
I
2b
x
13
lib/ipaddr.rb
p
0
x
11
ipv4_compat
M
1
n
n
x
11
ipv4_compat
i
38
5
47
49
0
0
9
10
1
8
21
5
45
1
2
7
3
64
47
49
4
2
15
5
49
5
0
39
6
45
7
8
43
9
49
10
2
11
11
I
3
I
0
I
0
I
0
I
0
n
p
11
x
5
ipv4?
x
13
ArgumentError
n
s
19
not an IPv4 address
x
5
raise
x
5
clone
x
5
@addr
x
6
Socket
n
x
8
AF_INET6
x
3
set
p
11
I
-1
I
111
I
0
I
112
I
a
I
113
I
15
I
0
I
16
I
115
I
26
x
13
lib/ipaddr.rb
p
0
x
6
native
M
1
n
n
x
6
native
i
56
5
47
49
0
0
10
10
2
8
11
3
13
9
26
15
5
47
49
1
0
10
25
2
8
26
3
9
32
5
11
8
33
1
15
5
49
2
0
39
3
45
4
5
49
6
1
45
7
8
43
9
49
10
2
11
11
I
3
I
0
I
0
I
0
I
0
n
p
11
x
12
ipv4_mapped?
x
12
ipv4_compat?
x
5
clone
x
5
@addr
x
7
IN4MASK
n
x
1
&
x
6
Socket
n
x
7
AF_INET
x
3
set
p
13
I
-1
I
11b
I
0
I
11c
I
1c
I
11d
I
20
I
11c
I
21
I
0
I
22
I
11f
I
38
x
13
lib/ipaddr.rb
p
0
x
7
reverse
M
1
n
n
x
7
reverse
i
55
39
0
13
45
1
2
43
3
12
49
4
1
9
26
15
5
48
5
7
6
64
81
7
11
8
54
13
45
1
8
43
9
12
49
4
1
9
45
15
5
48
10
11
8
54
15
5
7
11
64
47
49
12
1
11
I
3
I
0
I
0
I
0
I
0
n
p
13
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
8
_reverse
s
13
.in-addr.arpa
x
1
+
n
x
8
AF_INET6
x
8
ip6_arpa
s
26
unsupported address family
x
5
raise
p
17
I
-1
I
124
I
0
I
125
I
2
I
126
I
f
I
127
I
1a
I
128
I
27
I
129
I
2e
I
12b
I
36
I
0
I
37
x
13
lib/ipaddr.rb
p
0
x
8
ip6_arpa
M
1
n
n
x
8
ip6_arpa
i
32
5
47
49
0
0
9
10
1
8
21
5
45
1
2
7
3
64
47
49
4
2
15
5
48
5
7
6
64
81
7
11
11
I
3
I
0
I
0
I
0
I
0
n
p
8
x
5
ipv6?
x
13
ArgumentError
n
s
19
not an IPv6 address
x
5
raise
x
8
_reverse
s
9
.ip6.arpa
x
1
+
p
11
I
-1
I
130
I
0
I
131
I
a
I
132
I
15
I
0
I
16
I
134
I
20
x
13
lib/ipaddr.rb
p
0
x
7
ip6_int
M
1
n
n
x
7
ip6_int
i
32
5
47
49
0
0
9
10
1
8
21
5
45
1
2
7
3
64
47
49
4
2
15
5
48
5
7
6
64
81
7
11
11
I
3
I
0
I
0
I
0
I
0
n
p
8
x
5
ipv6?
x
13
ArgumentError
n
s
19
not an IPv6 address
x
5
raise
x
8
_reverse
s
8
.ip6.int
x
1
+
p
11
I
-1
I
138
I
0
I
139
I
a
I
13a
I
15
I
0
I
16
I
13c
I
20
x
13
lib/ipaddr.rb
p
0
x
4
succ
M
1
n
n
x
4
succ
i
16
5
49
0
0
39
1
79
81
2
39
3
49
4
2
11
11
I
3
I
0
I
0
I
0
I
0
n
p
5
x
5
clone
x
5
@addr
x
1
+
x
7
@family
x
3
set
p
5
I
-1
I
140
I
0
I
141
I
10
x
13
lib/ipaddr.rb
p
0
x
3
<=>
M
1
n
n
x
3
<=>
i
39
5
20
0
47
49
0
1
19
0
15
20
0
49
1
0
39
2
83
3
9
24
1
8
26
1
11
15
39
4
20
0
49
5
0
49
6
1
11
11
I
3
I
1
I
1
I
0
I
1
n
p
7
x
12
coerce_other
x
6
family
x
7
@family
x
2
==
x
5
@addr
x
4
to_i
x
3
<=>
p
11
I
-1
I
145
I
0
I
146
I
a
I
148
I
1a
I
0
I
1b
I
14a
I
27
x
13
lib/ipaddr.rb
p
1
x
5
other
x
10
Comparable
n
x
7
include
x
8
to_range
M
1
n
n
x
8
to_range
i
110
39
0
39
1
49
2
1
19
0
15
39
3
13
45
4
5
43
6
12
49
7
1
9
42
15
39
0
45
8
9
39
1
49
10
1
49
11
1
19
1
8
81
13
45
4
12
43
13
12
49
7
1
9
72
15
39
0
45
14
15
39
1
49
10
1
49
11
1
19
1
8
81
15
5
7
16
64
47
49
17
1
15
44
43
18
5
48
19
20
0
39
3
49
20
2
5
48
19
20
1
39
3
49
20
2
49
21
2
11
11
I
7
I
2
I
0
I
0
I
0
n
p
22
x
5
@addr
x
10
@mask_addr
x
1
&
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
7
IN4MASK
n
x
1
^
x
1
|
n
x
8
AF_INET6
x
7
IN6MASK
n
s
26
unsupported address family
x
5
raise
x
5
Range
x
5
clone
x
3
set
x
3
new
p
21
I
-1
I
14f
I
0
I
150
I
a
I
152
I
c
I
153
I
19
I
154
I
2a
I
155
I
37
I
156
I
49
I
158
I
51
I
0
I
52
I
15b
I
6e
x
13
lib/ipaddr.rb
p
2
x
10
begin_addr
x
8
end_addr
x
7
inspect
M
1
n
n
x
7
inspect
i
85
39
0
13
45
1
2
43
3
12
49
4
1
9
22
15
7
5
64
19
0
8
51
13
45
1
6
43
7
12
49
4
1
9
42
15
7
8
64
19
0
8
51
15
5
7
9
64
47
49
10
1
15
5
7
11
64
5
49
12
0
49
13
0
20
0
5
39
14
47
49
15
1
5
39
16
47
49
15
1
47
49
17
5
11
11
I
8
I
1
I
0
I
0
I
0
n
p
18
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
s
4
IPv4
n
x
8
AF_INET6
s
4
IPv6
s
26
unsupported address family
x
5
raise
s
15
#<%s: %s:%s/%s>
x
5
class
x
4
name
x
5
@addr
x
10
_to_string
x
10
@mask_addr
x
7
sprintf
p
23
I
-1
I
160
I
0
I
161
I
2
I
162
I
f
I
163
I
16
I
164
I
23
I
165
I
2b
I
167
I
33
I
0
I
34
I
169
I
3f
I
16a
I
4f
I
169
I
55
x
13
lib/ipaddr.rb
p
1
x
2
af
x
9
protected
x
3
set
M
1
n
n
x
3
set
i
153
20
1
78
49
0
1
9
16
20
1
78
49
0
1
8
18
39
1
13
45
2
3
43
4
12
49
5
1
9
65
15
20
0
78
84
6
13
10
47
15
20
0
45
7
8
85
9
9
62
5
45
10
11
7
12
64
47
49
13
2
8
63
1
8
124
13
45
2
14
43
15
12
49
5
1
9
112
15
20
0
78
84
6
13
10
94
15
20
0
45
16
17
85
9
9
109
5
45
10
18
7
12
64
47
49
13
2
8
110
1
8
124
15
5
45
10
19
7
20
64
47
49
13
2
15
20
0
38
21
15
20
1
78
49
0
1
9
148
20
1
78
49
0
1
38
1
8
149
1
15
5
11
11
I
5
I
2
I
1
I
0
I
1
I
1
p
22
x
2
[]
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
1
<
x
7
IN4MASK
n
x
1
>
x
13
ArgumentError
n
s
15
invalid address
x
5
raise
n
x
8
AF_INET6
x
7
IN6MASK
n
n
n
s
26
unsupported address family
x
5
@addr
p
41
I
-1
I
16f
I
0
I
170
I
12
I
171
I
1f
I
172
I
31
I
173
I
3e
I
172
I
3f
I
0
I
41
I
175
I
4e
I
176
I
60
I
177
I
6d
I
176
I
6e
I
0
I
71
I
17a
I
7c
I
0
I
7d
I
17c
I
82
I
17d
I
8a
I
17e
I
94
I
17d
I
95
I
0
I
96
I
180
I
99
x
13
lib/ipaddr.rb
p
2
x
4
addr
x
6
family
x
5
mask!
M
1
n
n
x
5
mask!
i
300
20
0
45
0
1
49
2
1
9
123
20
0
7
3
13
70
9
30
15
44
43
4
7
5
78
49
6
2
6
3
49
7
1
9
44
20
0
49
8
0
19
1
8
121
45
9
10
13
71
6
47
9
67
47
49
11
0
13
20
0
47
49
12
1
15
8
72
20
0
49
6
1
19
2
15
20
2
49
13
0
39
14
83
15
9
89
1
8
100
5
45
16
17
7
18
64
47
49
19
2
15
20
2
49
8
0
38
20
15
39
21
39
20
49
22
1
38
21
15
5
11
8
127
20
0
19
1
15
39
14
13
45
23
24
43
25
12
49
26
1
9
201
15
20
1
78
84
27
13
10
158
15
20
1
4
32
85
28
9
173
5
45
16
29
7
30
64
47
49
19
2
8
174
1
15
4
32
20
1
82
31
19
3
15
45
32
33
20
3
49
34
1
20
3
49
35
1
38
20
8
281
13
45
23
36
43
37
12
49
26
1
9
272
15
20
1
78
84
27
13
10
229
15
20
1
4
128
85
28
9
244
5
45
16
38
7
30
64
47
49
19
2
8
245
1
15
4
128
20
1
82
31
19
3
15
45
39
40
20
3
49
34
1
20
3
49
35
1
38
20
8
281
15
5
7
41
64
47
49
19
1
15
39
21
20
3
49
34
1
20
3
49
35
1
38
21
15
5
11
11
I
8
I
4
I
1
I
0
I
1
n
p
42
x
6
String
n
x
8
kind_of?
n
x
6
Regexp
s
5
^\d+$
x
3
new
x
2
=~
x
4
to_i
x
6
IPAddr
n
x
8
allocate
x
10
initialize
x
6
family
x
7
@family
x
2
==
x
13
ArgumentError
n
s
26
address family is not same
x
5
raise
x
10
@mask_addr
x
5
@addr
x
1
&
x
6
Socket
n
x
7
AF_INET
x
3
===
x
1
<
x
1
>
n
s
14
invalid length
x
1
-
x
7
IN4MASK
n
x
2
>>
x
2
<<
n
x
8
AF_INET6
n
x
7
IN6MASK
n
s
26
unsupported address family
p
67
I
-1
I
183
I
0
I
184
I
a
I
185
I
23
I
186
I
2c
I
188
I
4b
I
189
I
59
I
18a
I
64
I
0
I
65
I
18c
I
6d
I
18d
I
77
I
18e
I
79
I
0
I
7b
I
191
I
7f
I
0
I
80
I
193
I
82
I
194
I
8f
I
195
I
a0
I
196
I
ad
I
195
I
ae
I
0
I
af
I
198
I
b8
I
199
I
c9
I
19a
I
d6
I
19b
I
e7
I
19c
I
f4
I
19b
I
f5
I
0
I
f6
I
19e
I
ff
I
19f
I
111
I
1a1
I
119
I
0
I
11a
I
1a3
I
129
I
1a4
I
12c
x
13
lib/ipaddr.rb
p
4
x
4
mask
x
9
prefixlen
x
1
m
x
7
masklen
x
7
private
x
10
initialize
M
1
n
n
x
10
initialize
i
470
23
0
10
10
7
0
64
19
0
15
23
1
10
22
45
1
2
43
3
19
1
15
20
0
45
4
5
49
6
1
9
35
1
8
147
20
1
13
45
1
7
43
8
12
49
9
1
10
63
13
45
1
10
43
11
12
49
9
1
10
63
8
103
15
5
20
0
49
12
0
20
1
47
49
13
2
15
20
1
45
1
14
43
8
83
15
9
93
45
16
17
8
96
45
18
19
38
20
15
1
11
8
147
13
45
1
21
43
3
12
49
9
1
9
129
15
5
45
22
23
7
24
64
47
49
25
2
8
147
15
5
45
22
26
7
27
20
1
47
101
28
63
2
47
49
25
2
15
20
0
7
29
64
49
30
1
97
37
19
2
15
37
19
3
15
15
2
15
20
2
7
31
13
70
9
188
15
44
43
32
7
33
79
49
34
2
6
31
49
35
1
9
211
4
5
78
98
36
2
19
2
15
45
1
37
43
11
19
1
8
212
1
15
26
93
0
15
29
231
0
45
38
39
20
2
49
40
1
30
8
268
26
93
1
15
24
13
45
41
42
12
49
9
1
10
248
8
263
15
5
45
22
43
7
44
64
47
49
25
2
25
8
268
15
92
1
27
34
92
0
27
15
1
38
45
38
46
15
20
1
45
1
47
43
3
83
15
13
10
300
15
20
1
45
1
48
43
8
83
15
9
328
5
20
2
47
49
49
1
38
46
15
39
46
9
325
45
1
50
43
8
38
45
8
326
1
8
329
1
15
39
46
10
337
2
8
338
3
13
9
364
15
20
1
45
1
51
43
3
83
15
13
10
364
15
20
1
45
1
52
43
11
83
15
9
385
5
20
2
47
49
53
1
38
46
15
45
1
54
43
11
38
45
8
386
1
15
20
1
45
1
55
43
3
83
15
10
401
2
8
402
3
13
9
418
15
39
45
20
1
83
15
10
417
2
8
418
3
9
433
5
45
22
56
7
57
64
47
49
25
2
8
434
1
15
20
3
9
448
5
20
3
47
49
58
1
8
469
39
45
45
1
59
43
8
83
15
9
464
45
16
60
8
467
45
18
61
38
20
11
I
a
I
4
I
0
I
0
I
2
n
p
62
s
2
::
x
6
Socket
n
x
9
AF_UNSPEC
x
6
String
n
x
8
kind_of?
n
x
7
AF_INET
x
3
===
n
x
8
AF_INET6
x
4
to_i
x
3
set
n
x
2
==
x
7
IN4MASK
n
x
7
IN6MASK
n
x
10
@mask_addr
n
x
13
ArgumentError
n
s
32
address family must be specified
x
5
raise
n
s
28
unsupported address family: 
x
4
to_s
s
1
/
x
5
split
n
x
6
Regexp
s
10
^\[(.*)\]$
x
3
new
x
2
=~
x
24
regexp_last_match_result
n
x
8
IPSocket
n
x
10
getaddress
x
13
StandardError
n
n
s
15
invalid address
x
7
@family
x
5
@addr
n
n
x
7
in_addr
n
n
n
x
8
in6_addr
n
n
n
s
23
address family mismatch
x
5
mask!
n
n
n
p
91
I
-1
I
1bb
I
16
I
1bc
I
23
I
1bd
I
25
I
1be
I
40
I
1bf
I
4d
I
1c0
I
60
I
1c0
I
63
I
1c1
I
67
I
1c2
I
74
I
1c3
I
82
I
1c5
I
93
I
0
I
94
I
1c8
I
a8
I
1c9
I
c1
I
1ca
I
ca
I
1cb
I
d3
I
1c9
I
d4
I
0
I
d5
I
1d1
I
e7
I
0
I
ec
I
1d3
I
10c
I
0
I
110
I
1d5
I
116
I
1d6
I
12e
I
1d7
I
138
I
1d8
I
13c
I
1d9
I
145
I
1d8
I
146
I
0
I
148
I
1d6
I
149
I
0
I
14a
I
1dc
I
16e
I
1dd
I
178
I
1de
I
181
I
1dc
I
182
I
0
I
183
I
1e0
I
1a4
I
1e1
I
1b1
I
1e0
I
1b2
I
0
I
1b3
I
1e3
I
1b7
I
1e4
I
1c0
I
1e6
I
1d3
I
1e6
I
1d5
I
0
I
1d6
x
13
lib/ipaddr.rb
p
4
x
4
addr
x
6
family
x
6
prefix
x
9
prefixlen
x
12
coerce_other
M
1
n
n
x
12
coerce_other
i
94
20
0
13
45
0
1
12
49
2
1
9
17
15
20
0
8
93
13
45
3
4
12
49
2
1
9
59
15
5
49
5
0
13
71
6
47
9
52
47
49
7
0
13
20
0
47
49
8
1
15
8
57
20
0
49
6
1
8
93
15
5
49
5
0
13
71
6
47
9
86
47
49
7
0
13
20
0
39
9
47
49
8
2
15
8
93
20
0
39
9
49
6
2
11
I
5
I
1
I
1
I
0
I
1
n
p
10
x
6
IPAddr
n
x
3
===
x
6
String
n
x
5
class
x
3
new
x
8
allocate
x
10
initialize
x
7
@family
p
17
I
-1
I
1ea
I
0
I
1eb
I
2
I
1ec
I
d
I
1ed
I
11
I
1ee
I
1c
I
1ef
I
3c
I
1f1
I
5d
I
0
I
5e
x
13
lib/ipaddr.rb
p
1
x
5
other
x
7
in_addr
M
1
n
n
x
7
in_addr
i
47
20
0
7
0
13
70
9
20
15
44
43
1
7
2
78
49
3
2
6
0
49
4
1
9
42
20
0
7
5
64
49
6
1
78
56
7
50
8
1
11
8
43
1
15
1
11
11
I
5
I
1
I
1
I
0
I
1
n
p
9
n
x
6
Regexp
s
20
^\d+\.\d+\.\d+\.\d+$
x
3
new
x
2
=~
s
1
.
x
5
split
M
1
p
2
x
9
for_block
t
n
x
7
in_addr
i
26
58
37
19
0
15
37
19
1
15
15
20
0
4
8
49
0
1
20
1
49
1
0
49
2
1
11
I
5
I
2
I
2
I
0
I
2
n
p
3
x
2
<<
x
4
to_i
x
1
|
p
5
I
0
I
1f7
I
a
I
1f8
I
1a
x
13
lib/ipaddr.rb
p
2
x
1
i
x
1
s
x
6
inject
p
13
I
-1
I
1f5
I
0
I
1f6
I
19
I
1f7
I
2a
I
1f6
I
2b
I
0
I
2c
I
1fb
I
2f
x
13
lib/ipaddr.rb
p
1
x
4
addr
x
8
in6_addr
M
1
n
n
x
8
in6_addr
i
285
20
0
13
7
0
13
70
9
21
15
44
43
1
7
2
79
49
3
2
6
0
12
49
4
1
9
46
15
5
4
5
78
98
5
2
47
49
6
1
7
7
81
8
11
8
180
13
7
9
13
70
9
65
15
44
43
1
7
10
79
49
3
2
6
9
12
49
4
1
9
86
15
5
4
5
78
98
5
2
47
49
6
1
11
8
180
13
7
11
13
70
9
105
15
44
43
1
7
12
79
49
3
2
6
11
12
49
4
1
9
125
15
5
45
13
14
7
15
64
47
49
16
2
8
180
13
7
17
13
70
9
144
15
44
43
1
7
18
78
49
3
2
6
17
12
49
4
1
9
174
15
4
5
78
98
5
2
4
5
79
98
5
2
17
2
19
0
15
19
1
15
2
8
180
15
7
19
64
19
1
15
20
0
7
20
64
49
21
1
19
2
15
20
1
7
20
64
49
21
1
19
3
15
4
8
20
2
49
22
0
82
23
20
3
49
22
0
82
23
19
4
15
20
4
78
84
24
9
233
1
11
8
234
1
15
20
2
45
25
26
13
71
3
47
9
263
47
49
27
0
13
20
4
7
28
64
47
49
29
2
15
8
271
20
4
7
28
64
49
3
2
81
8
20
3
81
8
78
56
30
50
31
1
11
11
I
a
I
5
I
1
I
0
I
1
n
p
32
n
x
6
Regexp
s
29
^::ffff:(\d+\.\d+\.\d+\.\d+)$
x
3
new
x
3
===
x
24
regexp_last_match_result
x
7
in_addr
I
ffff00000000
x
1
+
n
s
24
^::(\d+\.\d+\.\d+\.\d+)$
n
s
10
[^0-9a-f:]
x
13
ArgumentError
n
s
15
invalid address
x
5
raise
n
s
12
^(.*)::(.*)$
s
0

s
1
:
x
5
split
x
4
size
x
1
-
x
1
<
x
5
Array
n
x
8
allocate
s
1
0
x
10
initialize
M
1
p
2
x
9
for_block
t
n
x
8
in6_addr
i
26
58
37
19
0
15
37
19
1
15
15
20
0
4
16
49
0
1
20
1
49
1
0
49
2
1
11
I
5
I
2
I
2
I
0
I
2
n
p
3
x
2
<<
x
3
hex
x
1
|
p
5
I
0
I
211
I
a
I
212
I
1a
x
13
lib/ipaddr.rb
p
2
x
1
i
x
1
s
x
6
inject
p
41
I
-1
I
1fe
I
0
I
1ff
I
2
I
200
I
1c
I
201
I
2e
I
202
I
48
I
203
I
56
I
204
I
70
I
205
I
7d
I
206
I
97
I
207
I
af
I
209
I
b4
I
0
I
b5
I
20b
I
c0
I
20c
I
cb
I
20d
I
de
I
20e
I
e5
I
20f
I
e9
I
20e
I
ea
I
0
I
eb
I
211
I
11d
x
13
lib/ipaddr.rb
p
5
x
4
left
x
5
right
x
1
l
x
1
r
x
4
rest
x
9
addr_mask
M
1
n
n
x
9
addr_mask
i
60
39
0
13
45
1
2
43
3
12
49
4
1
9
26
15
20
0
45
5
6
49
7
1
11
8
59
13
45
1
8
43
9
12
49
4
1
9
50
15
20
0
45
10
11
49
7
1
11
8
59
15
5
7
12
64
47
49
13
1
11
I
4
I
1
I
1
I
0
I
1
n
p
14
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
7
IN4MASK
n
x
1
&
n
x
8
AF_INET6
x
7
IN6MASK
n
s
26
unsupported address family
x
5
raise
p
17
I
-1
I
216
I
0
I
217
I
2
I
218
I
f
I
219
I
1a
I
21a
I
27
I
21b
I
33
I
21d
I
3b
I
0
I
3c
x
13
lib/ipaddr.rb
p
1
x
4
addr
x
8
_reverse
M
1
n
n
x
8
_reverse
i
99
39
0
13
45
1
2
43
3
12
49
4
1
9
38
15
44
43
5
78
4
3
49
6
2
56
7
50
8
0
7
9
64
49
10
1
11
8
98
13
45
1
11
43
12
12
49
4
1
9
89
15
7
13
64
39
14
49
15
1
49
16
0
7
17
13
70
9
80
15
44
43
18
7
19
78
49
6
2
6
17
7
20
64
49
21
2
11
8
98
15
5
7
22
64
47
49
23
1
11
I
4
I
0
I
0
I
0
I
0
n
p
24
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
8
_reverse
i
22
57
19
0
15
39
0
4
8
20
0
49
1
1
49
2
1
4
255
49
3
1
11
I
5
I
1
I
1
I
0
I
1
n
p
4
x
5
@addr
x
1
*
x
2
>>
x
1
&
p
5
I
0
I
224
I
4
I
225
I
16
x
13
lib/ipaddr.rb
p
1
x
1
i
x
3
map
s
1
.
x
4
join
n
x
8
AF_INET6
s
5
%.32x
x
5
@addr
x
1
%
x
8
reverse!
n
x
6
Regexp
s
6
.(?!$)
s
3
\&.
x
5
gsub!
s
26
unsupported address family
x
5
raise
p
21
I
-1
I
221
I
0
I
222
I
2
I
223
I
f
I
224
I
1d
I
226
I
20
I
224
I
26
I
227
I
33
I
228
I
5a
I
22a
I
62
I
0
I
63
x
13
lib/ipaddr.rb
p
0
x
10
_to_string
M
1
n
n
x
10
_to_string
i
96
39
0
13
45
1
2
43
3
12
49
4
1
9
38
15
44
43
5
78
4
3
49
6
2
56
7
50
8
0
7
9
64
49
10
1
11
8
95
13
45
1
11
43
12
12
49
4
1
9
86
15
7
13
64
20
0
49
14
1
7
15
13
70
9
77
15
44
43
16
7
17
78
49
6
2
6
15
7
18
64
49
19
2
11
8
95
15
5
7
20
64
47
49
21
1
11
I
5
I
1
I
1
I
0
I
1
n
p
22
x
7
@family
x
6
Socket
n
x
7
AF_INET
x
3
===
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
10
_to_string
i
27
57
19
0
15
21
1
0
4
24
4
8
20
0
49
0
1
82
1
49
2
1
4
255
49
3
1
11
I
6
I
1
I
1
I
0
I
1
n
p
4
x
1
*
x
1
-
x
2
>>
x
1
&
p
5
I
0
I
231
I
4
I
232
I
1b
x
13
lib/ipaddr.rb
p
1
x
1
i
x
3
map
s
1
.
x
4
join
n
x
8
AF_INET6
s
5
%.32x
x
1
%
n
x
6
Regexp
s
9
.{4}(?!$)
s
3
\&:
x
5
gsub!
s
26
unsupported address family
x
5
raise
p
21
I
-1
I
22e
I
0
I
22f
I
2
I
230
I
f
I
231
I
1d
I
233
I
20
I
231
I
26
I
234
I
33
I
235
I
57
I
237
I
5f
I
0
I
60
x
13
lib/ipaddr.rb
p
1
x
4
addr
p
91
I
2
I
56
I
b
I
57
I
14
I
58
I
2b
I
5b
I
33
I
5f
I
40
I
65
I
4d
I
72
I
5b
I
77
I
69
I
7c
I
77
I
81
I
85
I
86
I
93
I
8b
I
a1
I
92
I
af
I
9f
I
bd
I
ba
I
c7
I
bd
I
d5
I
c2
I
e3
I
dc
I
f1
I
e1
I
ff
I
ef
I
10d
I
f4
I
11b
I
f9
I
129
I
fe
I
137
I
108
I
145
I
111
I
153
I
11b
I
161
I
124
I
16f
I
130
I
17d
I
138
I
18b
I
140
I
199
I
145
I
1a7
I
14c
I
1b0
I
14f
I
1be
I
160
I
1cc
I
16d
I
1d0
I
16f
I
1de
I
183
I
1ec
I
1a7
I
1f0
I
1bb
I
1fe
I
1ea
I
20c
I
1f5
I
21a
I
1fe
I
228
I
216
I
236
I
221
I
244
I
22e
I
252
x
13
lib/ipaddr.rb
p
0
x
7
Globals
x
2
$0
x
2
[]
x
11
active_path
x
2
==
x
4
DATA
n
x
4
read
I
23e
x
1
+
x
4
eval
p
21
I
b
I
12
I
14
I
14
I
22
I
15
I
3d
I
19
I
5a
I
0
I
5b
I
54
I
76
I
23d
I
86
I
23e
I
a2
I
23d
I
a3
I
0
I
a6
x
13
lib/ipaddr.rb
p
0
