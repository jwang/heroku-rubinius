!RBIX
4472690874163217065
18
M
1
n
n
x
10
__script__
i
40
5
7
0
64
47
49
1
1
15
99
7
2
1
45
3
4
49
5
3
13
99
12
7
6
12
7
7
12
65
12
49
8
4
15
49
6
0
15
2
11
I
6
I
0
I
0
I
0
I
0
n
p
9
s
25
rubinius/debugger/display
x
7
require
x
8
Debugger
x
8
Rubinius
n
x
16
open_class_under
x
14
__class_init__
M
1
n
n
x
8
Debugger
i
56
5
66
99
7
0
1
65
49
1
3
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
99
7
5
1
65
49
1
3
13
99
12
7
2
12
7
6
12
65
12
49
4
4
15
49
2
0
11
I
6
I
0
I
0
I
0
I
0
n
p
7
x
18
CommandDescription
x
10
open_class
x
14
__class_init__
M
1
n
n
x
18
CommandDescription
i
44
5
66
5
7
0
7
1
7
2
7
3
47
49
4
4
15
99
7
5
7
6
65
67
49
7
0
49
8
4
15
99
7
9
7
10
65
67
49
7
0
49
8
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
x
5
klass
x
8
patterns
x
4
help
x
8
ext_help
x
13
attr_accessor
x
10
initialize
M
1
n
n
x
10
initialize
i
5
20
0
38
0
11
I
2
I
1
I
1
I
0
I
1
n
p
1
x
6
@klass
p
5
I
-1
I
7
I
0
I
8
I
5
x
33
lib/rubinius/debugger/commands.rb
p
1
x
5
klass
x
17
method_visibility
x
15
add_defn_method
x
4
name
M
1
n
n
x
4
name
i
6
39
0
49
1
0
11
I
1
I
0
I
0
I
0
I
0
n
p
2
x
6
@klass
x
4
name
p
5
I
-1
I
b
I
0
I
c
I
6
x
33
lib/rubinius/debugger/commands.rb
p
0
p
7
I
2
I
5
I
10
I
7
I
1e
I
b
I
2c
x
33
lib/rubinius/debugger/commands.rb
p
0
x
13
attach_method
x
7
Command
M
1
n
n
x
7
Command
i
605
5
66
5
45
0
1
43
2
43
3
47
49
4
1
15
35
0
38
5
15
99
7
6
7
7
65
5
49
8
4
15
99
7
9
7
10
65
5
49
8
4
15
99
7
11
7
12
65
5
49
8
4
15
99
7
13
7
14
65
5
49
8
4
15
99
7
15
7
16
65
5
49
8
4
15
99
7
17
7
18
65
5
49
8
4
15
99
7
19
7
20
65
67
49
21
0
49
22
4
15
99
7
23
7
24
65
67
49
21
0
49
22
4
15
99
7
25
7
26
65
67
49
21
0
49
22
4
15
99
7
27
7
28
65
67
49
21
0
49
22
4
15
99
7
29
7
30
65
67
49
21
0
49
22
4
15
99
7
31
7
32
65
67
49
21
0
49
22
4
15
99
7
33
45
34
35
65
49
36
3
13
99
12
7
37
12
7
38
12
65
12
49
8
4
15
49
37
0
15
99
7
39
45
34
40
65
49
36
3
13
99
12
7
37
12
7
41
12
65
12
49
8
4
15
49
37
0
15
99
7
42
45
39
43
65
49
36
3
13
99
12
7
37
12
7
44
12
65
12
49
8
4
15
49
37
0
15
99
7
45
45
34
46
65
49
36
3
13
99
12
7
37
12
7
47
12
65
12
49
8
4
15
49
37
0
15
99
7
48
45
34
49
65
49
36
3
13
99
12
7
37
12
7
50
12
65
12
49
8
4
15
49
37
0
15
99
7
51
45
48
52
65
49
36
3
13
99
12
7
37
12
7
53
12
65
12
49
8
4
15
49
37
0
15
99
7
54
45
48
55
65
49
36
3
13
99
12
7
37
12
7
56
12
65
12
49
8
4
15
49
37
0
15
99
7
57
45
34
58
65
49
36
3
13
99
12
7
37
12
7
59
12
65
12
49
8
4
15
49
37
0
15
99
7
60
45
34
61
65
49
36
3
13
99
12
7
37
12
7
62
12
65
12
49
8
4
15
49
37
0
15
99
7
63
45
34
64
65
49
36
3
13
99
12
7
37
12
7
65
12
65
12
49
8
4
15
49
37
0
15
99
7
66
45
34
67
65
49
36
3
13
99
12
7
37
12
7
68
12
65
12
49
8
4
15
49
37
0
15
99
7
69
45
34
70
65
49
36
3
13
99
12
7
37
12
7
71
12
65
12
49
8
4
15
49
37
0
15
99
7
72
45
34
73
65
49
36
3
13
99
12
7
37
12
7
74
12
65
12
49
8
4
15
49
37
0
15
99
7
75
45
34
76
65
49
36
3
13
99
12
7
37
12
7
77
12
65
12
49
8
4
15
49
37
0
15
99
7
78
45
34
79
65
49
36
3
13
99
12
7
37
12
7
80
12
65
12
49
8
4
15
49
37
0
11
I
6
I
0
I
0
I
0
I
0
n
p
81
x
8
Rubinius
n
x
8
Debugger
x
7
Display
x
7
include
x
9
@commands
x
8
commands
M
1
n
n
x
8
commands
i
3
39
0
11
I
1
I
0
I
0
I
0
I
0
n
p
1
x
9
@commands
p
5
I
-1
I
15
I
0
I
16
I
3
x
33
lib/rubinius/debugger/commands.rb
p
0
x
13
attach_method
x
10
descriptor
M
1
n
n
x
10
descriptor
i
35
39
0
13
10
34
15
45
1
2
13
71
3
47
9
28
47
49
4
0
13
5
47
49
5
1
15
8
32
5
49
3
1
38
0
11
I
3
I
0
I
0
I
0
I
0
n
p
6
x
11
@descriptor
x
18
CommandDescription
n
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
19
I
0
I
1a
I
23
x
33
lib/rubinius/debugger/commands.rb
p
0
x
7
pattern
M
1
n
n
x
7
pattern
i
24
45
0
1
49
2
0
5
49
3
1
15
5
48
4
20
0
13
18
2
49
5
1
15
11
I
4
I
1
I
0
I
0
I
0
I
0
p
6
x
7
Command
n
x
8
commands
x
2
<<
x
10
descriptor
x
9
patterns=
p
7
I
-1
I
1d
I
0
I
1e
I
b
I
1f
I
18
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
strs
x
4
help
M
1
n
n
x
4
help
i
13
5
48
0
20
0
13
18
2
49
1
1
15
11
I
4
I
1
I
1
I
0
I
1
n
p
2
x
10
descriptor
x
5
help=
p
5
I
-1
I
22
I
0
I
23
I
d
x
33
lib/rubinius/debugger/commands.rb
p
1
x
3
str
x
8
ext_help
M
1
n
n
x
8
ext_help
i
13
5
48
0
20
0
13
18
2
49
1
1
15
11
I
4
I
1
I
1
I
0
I
1
n
p
2
x
10
descriptor
x
9
ext_help=
p
5
I
-1
I
26
I
0
I
27
I
d
x
33
lib/rubinius/debugger/commands.rb
p
1
x
3
str
x
6
match?
M
1
n
n
x
6
match?
i
12
5
48
0
49
1
0
20
0
49
2
1
11
I
3
I
1
I
1
I
0
I
1
n
p
3
x
10
descriptor
x
8
patterns
x
8
include?
p
5
I
-1
I
2a
I
0
I
2b
I
c
x
33
lib/rubinius/debugger/commands.rb
p
1
x
3
cmd
x
10
initialize
M
1
n
n
x
10
initialize
i
5
20
0
38
0
11
I
2
I
1
I
1
I
0
I
1
n
p
1
x
9
@debugger
p
5
I
-1
I
2e
I
0
I
2f
I
5
x
33
lib/rubinius/debugger/commands.rb
p
1
x
8
debugger
x
17
method_visibility
x
15
add_defn_method
x
8
run_code
M
1
n
n
x
8
run_code
i
11
39
0
49
1
0
20
0
49
2
1
11
I
3
I
1
I
1
I
0
I
1
n
p
3
x
9
@debugger
x
13
current_frame
x
3
run
p
5
I
-1
I
32
I
0
I
33
I
b
x
33
lib/rubinius/debugger/commands.rb
p
1
x
3
str
x
14
current_method
M
1
n
n
x
14
current_method
i
9
39
0
49
1
0
49
2
0
11
I
1
I
0
I
0
I
0
I
0
n
p
3
x
9
@debugger
x
13
current_frame
x
6
method
p
5
I
-1
I
36
I
0
I
37
I
9
x
33
lib/rubinius/debugger/commands.rb
p
0
x
13
current_frame
M
1
n
n
x
13
current_frame
i
6
39
0
49
1
0
11
I
1
I
0
I
0
I
0
I
0
n
p
2
x
9
@debugger
x
13
current_frame
p
5
I
-1
I
3a
I
0
I
3b
I
6
x
33
lib/rubinius/debugger/commands.rb
p
0
x
9
variables
M
1
n
n
x
9
variables
i
6
39
0
49
1
0
11
I
1
I
0
I
0
I
0
I
0
n
p
2
x
9
@debugger
x
9
variables
p
5
I
-1
I
3e
I
0
I
3f
I
6
x
33
lib/rubinius/debugger/commands.rb
p
0
x
6
listen
M
1
n
n
x
6
listen
i
16
23
0
10
8
3
19
0
15
39
0
20
0
49
1
1
11
I
3
I
1
I
0
I
0
I
1
n
p
2
x
9
@debugger
x
6
listen
p
5
I
-1
I
42
I
8
I
43
I
10
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
step
x
4
Help
x
7
Command
n
x
10
open_class
x
14
__class_init__
M
1
n
n
x
4
Help
i
34
5
66
5
7
0
64
47
49
1
1
15
5
7
2
64
47
49
3
1
15
99
7
4
7
5
65
67
49
6
0
49
7
4
11
I
5
I
0
I
0
I
0
I
0
n
p
8
s
4
help
x
7
pattern
s
40
Show information about debugger commands
x
4
help
x
3
run
M
1
n
n
x
3
run
i
166
20
0
13
9
17
15
20
0
49
0
0
10
16
2
8
17
3
9
154
45
1
2
49
3
0
56
4
50
5
0
19
1
15
20
1
9
138
20
1
49
6
0
19
2
15
5
7
7
20
2
49
8
0
47
101
9
7
10
63
3
47
49
11
1
15
5
7
12
20
2
49
13
0
7
14
64
49
15
1
47
101
9
63
2
47
49
11
1
15
5
7
16
20
2
49
17
0
47
101
9
7
18
63
3
47
49
11
1
15
20
2
49
19
0
9
135
5
7
16
20
2
49
19
0
47
101
9
63
2
47
49
11
1
8
136
1
8
152
5
7
20
20
0
47
101
9
63
2
47
49
11
1
8
165
45
1
21
49
3
0
56
22
50
23
0
11
I
7
I
3
I
1
I
0
I
1
n
p
24
x
6
empty?
x
7
Command
n
x
8
commands
M
1
p
2
x
9
for_block
t
n
x
3
run
i
16
57
19
0
15
20
0
21
1
0
49
0
0
49
1
1
11
I
4
I
1
I
1
I
0
I
1
n
p
2
x
5
strip
x
6
match?
p
3
I
0
I
52
I
10
x
33
lib/rubinius/debugger/commands.rb
p
1
x
1
k
x
4
find
x
10
descriptor
s
9
Help for 
x
4
name
x
4
to_s
s
1
:
x
4
puts
s
18
  Accessed using: 
x
8
patterns
s
2
, 
x
4
join
s
1


x
4
help
s
1
.
x
8
ext_help
s
17
Unknown command: 
n
M
1
p
2
x
9
for_block
t
n
x
3
run
i
49
57
22
1
1
15
21
1
1
49
0
0
22
1
2
15
5
7
1
21
1
2
49
2
0
47
101
3
63
2
21
1
2
49
4
0
7
5
64
49
6
1
49
7
1
47
49
8
1
11
I
5
I
0
I
1
I
0
I
1
n
p
9
x
10
descriptor
s
6
%20s: 
x
4
help
x
4
to_s
x
8
patterns
s
2
, 
x
4
join
x
1
%
x
4
puts
p
7
I
0
I
5d
I
5
I
5e
I
f
I
60
I
31
x
33
lib/rubinius/debugger/commands.rb
p
0
x
4
each
p
29
I
-1
I
4f
I
0
I
51
I
13
I
52
I
21
I
53
I
25
I
54
I
2d
I
55
I
41
I
56
I
59
I
57
I
6d
I
58
I
88
I
0
I
8a
I
5a
I
98
I
0
I
9a
I
5d
I
a5
I
0
I
a6
x
33
lib/rubinius/debugger/commands.rb
p
3
x
4
args
x
5
klass
x
3
des
x
17
method_visibility
x
15
add_defn_method
p
7
I
2
I
4c
I
b
I
4d
I
14
I
4f
I
22
x
33
lib/rubinius/debugger/commands.rb
p
0
x
13
SetBreakPoint
n
M
1
n
n
x
13
SetBreakPoint
i
63
5
66
5
7
0
64
7
1
64
7
2
64
47
49
3
3
15
5
7
4
64
47
49
5
1
15
5
7
6
64
47
49
7
1
15
99
7
8
7
9
65
67
49
10
0
49
11
4
15
99
7
12
7
13
65
67
49
10
0
49
11
4
11
I
5
I
0
I
0
I
0
I
0
n
p
14
s
1
b
s
5
break
s
3
brk
x
7
pattern
s
39
Set a breakpoint at a point in a method
x
4
help
s
263
The breakpoint must be specified using the following notation:
  Klass[.#]method:line

Thus, to set a breakpoint for the instance method pop in
Array on line 33, use:
  Array#pop:33

To breakpoint on class method start of Debugger line 4, use:
  Debugger.start:4

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
345
23
1
10
8
3
19
1
15
7
0
13
70
9
26
15
44
43
1
7
2
78
49
3
2
6
0
20
0
49
4
1
19
2
15
20
2
9
41
1
8
60
5
7
5
20
0
47
101
6
7
7
63
3
47
49
8
1
15
1
11
15
20
2
79
49
9
1
19
3
15
20
2
80
49
9
1
19
4
15
20
2
4
3
49
9
1
19
5
15
20
2
4
4
49
9
1
9
110
20
2
4
4
49
9
1
49
10
0
8
111
1
19
6
15
26
93
0
15
29
133
0
5
20
3
47
49
11
1
19
7
30
8
197
26
93
1
15
24
13
45
12
13
12
49
14
1
10
150
8
192
15
5
7
15
20
2
79
49
9
1
47
101
6
63
2
47
49
8
1
15
5
20
3
20
4
20
5
20
6
47
49
16
4
15
1
92
0
27
11
25
8
197
15
92
1
27
34
92
0
27
15
26
93
2
15
29
240
0
20
4
7
17
64
83
18
9
228
20
7
20
5
49
19
1
19
8
8
237
20
7
20
5
49
20
1
19
8
30
8
307
26
93
3
15
24
13
45
12
21
12
49
14
1
10
257
8
302
15
5
7
22
20
5
47
101
6
7
23
20
7
47
101
6
63
4
47
49
8
1
15
5
20
3
20
4
20
5
20
6
47
49
16
4
15
1
92
2
27
11
25
8
307
15
92
3
27
34
92
2
27
15
39
24
20
0
49
25
0
20
8
20
6
49
26
3
19
9
15
20
1
9
339
20
9
49
27
0
8
340
1
15
20
9
11
11
I
13
I
a
I
1
I
0
I
2
n
p
28
n
x
6
Regexp
s
55
([A-Z]\w*(?:::[A-Z]\w*)*)([.#])(\w+[!?=]?)(?:[:](\d+))?
x
3
new
x
5
match
s
24
Unrecognized position: '
x
4
to_s
s
1
'
x
5
error
x
2
[]
x
4
to_i
x
8
run_code
x
9
NameError
n
x
3
===
s
29
Unable to find class/module: 
x
12
ask_deferred
s
1
#
x
2
==
x
15
instance_method
x
6
method
n
s
23
Unable to find method '
s
5
' in 
x
9
@debugger
x
5
strip
x
21
set_breakpoint_method
x
9
set_temp!
p
63
I
-1
I
76
I
8
I
77
I
22
I
78
I
29
I
79
I
3a
I
7a
I
3c
I
0
I
3d
I
7d
I
46
I
7e
I
4f
I
7f
I
59
I
80
I
6f
I
80
I
72
I
83
I
85
I
0
I
8a
I
84
I
97
I
85
I
aa
I
86
I
b8
I
87
I
c5
I
0
I
c9
I
8b
I
d9
I
8c
I
e4
I
8e
I
ed
I
0
I
f5
I
90
I
102
I
91
I
118
I
92
I
126
I
93
I
133
I
0
I
137
I
96
I
148
I
98
I
154
I
0
I
155
I
9a
I
159
x
33
lib/rubinius/debugger/commands.rb
p
10
x
4
args
x
4
temp
x
1
m
x
10
klass_name
x
5
which
x
4
name
x
4
line
x
5
klass
x
6
method
x
2
bp
x
17
method_visibility
x
15
add_defn_method
x
12
ask_deferred
M
1
n
n
x
12
ask_deferred
i
55
5
7
0
64
47
49
1
1
19
4
15
20
4
49
2
0
49
3
0
78
49
4
1
4
121
83
5
9
53
39
6
20
0
20
1
20
2
20
3
49
7
4
15
5
7
8
64
47
49
9
1
8
54
1
11
I
a
I
5
I
4
I
0
I
4
n
p
10
s
56
Would you like to defer this breakpoint to later? [y/n] 
x
3
ask
x
5
strip
x
8
downcase
x
2
[]
x
2
==
x
9
@debugger
x
23
add_deferred_breakpoint
s
28
Deferred breakpoint created.
x
4
info
p
15
I
-1
I
9d
I
0
I
9e
I
b
I
a0
I
1d
I
a1
I
2b
I
a2
I
35
I
a0
I
36
I
0
I
37
x
33
lib/rubinius/debugger/commands.rb
p
5
x
10
klass_name
x
5
which
x
4
name
x
4
line
x
6
answer
p
11
I
2
I
68
I
11
I
69
I
1a
I
6a
I
23
I
76
I
31
I
9d
I
3f
x
33
lib/rubinius/debugger/commands.rb
p
0
x
17
SetTempBreakPoint
n
M
1
n
n
x
17
SetTempBreakPoint
i
49
5
66
5
7
0
64
7
1
64
7
2
64
47
49
3
3
15
5
7
4
64
47
49
5
1
15
5
7
6
64
47
49
7
1
15
99
7
8
7
9
65
67
49
10
0
49
11
4
11
I
5
I
0
I
0
I
0
I
0
n
p
12
s
2
tb
s
6
tbreak
s
4
tbrk
x
7
pattern
s
26
Set a temporary breakpoint
x
4
help
s
59
Same as break, but the breakpoint is deleted when it is hit
x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
8
20
0
2
54
52
0
2
11
I
4
I
1
I
1
I
0
I
1
n
p
1
x
3
run
p
5
I
-1
I
ad
I
0
I
ae
I
8
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
args
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
a9
I
11
I
aa
I
1a
I
ab
I
23
I
ad
I
31
x
33
lib/rubinius/debugger/commands.rb
p
0
x
16
DeleteBreakpoint
n
M
1
n
n
x
16
DeleteBreakpoint
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
1
d
s
6
delete
x
7
pattern
s
19
Delete a breakpoint
x
4
help
s
69
Specify the breakpoint by number, use 'info break' to see the numbers
x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
116
20
0
10
7
2
8
8
3
13
10
17
15
20
0
49
0
0
9
32
5
7
1
64
47
49
2
1
15
1
11
8
33
1
15
26
93
0
15
29
56
0
5
20
0
49
3
0
47
49
4
1
19
1
30
8
104
26
93
1
15
24
13
45
5
6
12
49
7
1
10
73
8
99
15
5
7
8
20
0
47
101
9
7
10
63
3
47
49
2
1
15
1
92
0
27
11
25
8
104
15
92
1
27
34
92
0
27
15
39
11
20
1
49
12
1
11
I
8
I
2
I
1
I
0
I
1
n
p
13
x
6
empty?
s
41
Please specify which breakpoint by number
x
5
error
x
5
strip
x
7
Integer
x
13
ArgumentError
n
x
3
===
s
1
'
x
4
to_s
s
17
' is not a number
x
9
@debugger
x
17
delete_breakpoint
p
27
I
-1
I
b7
I
0
I
b8
I
13
I
b9
I
1c
I
ba
I
20
I
b8
I
21
I
0
I
22
I
be
I
38
I
0
I
3d
I
bf
I
4a
I
c0
I
5b
I
c1
I
68
I
0
I
6c
I
c4
I
74
x
33
lib/rubinius/debugger/commands.rb
p
2
x
4
args
x
1
i
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
b3
I
e
I
b4
I
17
I
b5
I
20
I
b7
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
4
Next
n
M
1
n
n
x
4
Next
i
116
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
15
99
7
11
7
12
65
67
49
9
0
49
10
4
15
99
7
13
7
14
65
67
49
9
0
49
10
4
15
99
7
15
7
16
65
67
49
9
0
49
10
4
15
99
7
17
7
18
65
67
49
9
0
49
10
4
15
99
7
19
7
20
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
21
s
1
n
s
4
next
x
7
pattern
s
43
Move to the next line or conditional branch
x
4
help
s
421
Attempt to continue execution and stop at the next line. If there is
a conditional branch between the current position and the next line,
execution is stopped within the conditional branch instead.

The optional argument is a number which specifies how many lines to
attempt to skip past before stopping execution.

If the current line is the last in a method, execution is stopped
at the current position of the caller.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
75
20
0
10
7
2
8
8
3
13
10
17
15
20
0
49
0
0
9
24
79
19
1
8
31
20
0
49
1
0
19
1
15
20
1
78
49
2
1
9
59
5
7
3
20
1
47
101
4
63
2
47
49
5
1
15
1
11
8
60
1
15
5
20
1
47
49
6
1
15
39
7
49
8
0
11
I
5
I
2
I
1
I
0
I
1
n
p
9
x
6
empty?
x
4
to_i
x
2
<=
s
21
Invalid step count - 
x
4
to_s
x
5
error
x
12
step_over_by
x
9
@debugger
x
6
listen
p
25
I
-1
I
d7
I
0
I
d8
I
13
I
d9
I
18
I
db
I
1f
I
0
I
20
I
de
I
28
I
df
I
37
I
e0
I
3b
I
de
I
3c
I
0
I
3d
I
e3
I
45
I
e4
I
4b
x
33
lib/rubinius/debugger/commands.rb
p
2
x
4
args
x
4
step
x
17
method_visibility
x
15
add_defn_method
x
12
step_over_by
M
1
n
n
x
12
step_over_by
i
72
5
48
0
19
1
15
77
19
2
15
20
1
49
1
0
19
3
15
20
1
49
2
0
20
0
81
3
19
4
15
20
3
20
4
20
1
49
4
0
49
5
2
19
5
15
20
5
9
52
1
8
56
5
48
6
11
15
5
20
3
20
1
49
4
0
20
5
47
49
7
3
11
I
a
I
6
I
1
I
0
I
1
n
p
8
x
13
current_frame
x
6
method
x
4
line
x
1
+
x
2
ip
x
16
first_ip_on_line
x
14
step_to_parent
x
23
set_breakpoints_between
p
21
I
-1
I
e7
I
0
I
e8
I
6
I
ea
I
a
I
ec
I
12
I
ed
I
1e
I
ee
I
2d
I
f0
I
34
I
f1
I
38
I
0
I
39
I
f4
I
48
x
33
lib/rubinius/debugger/commands.rb
p
6
x
4
step
x
1
f
x
2
ip
x
4
exec
x
13
possible_line
x
6
fin_ip
x
14
step_to_parent
M
1
n
n
x
14
step_to_parent
i
86
39
0
5
48
1
49
2
0
79
81
3
49
4
1
19
0
15
20
0
9
24
1
8
35
5
7
5
64
47
49
6
1
15
1
11
15
20
0
49
7
0
19
1
15
20
0
49
8
0
19
2
15
45
9
10
20
1
20
2
49
11
2
19
3
15
20
3
20
0
49
12
0
49
13
1
15
20
3
49
14
0
15
20
3
11
11
I
7
I
4
I
0
I
0
I
0
n
p
15
x
9
@debugger
x
13
current_frame
x
6
number
x
1
+
x
5
frame
s
36
Unable to find frame to step to next
x
4
info
x
6
method
x
2
ip
x
10
BreakPoint
n
x
6
for_ip
x
9
variables
x
9
for_step!
x
8
activate
p
25
I
-1
I
f7
I
0
I
f8
I
11
I
f9
I
18
I
fa
I
21
I
fb
I
23
I
0
I
24
I
fe
I
2c
I
ff
I
34
I
101
I
41
I
102
I
4c
I
103
I
52
I
105
I
56
x
33
lib/rubinius/debugger/commands.rb
p
4
x
1
f
x
4
exec
x
2
ip
x
2
bp
x
23
set_breakpoints_between
M
1
n
n
x
23
set_breakpoints_between
i
183
5
20
0
20
1
20
2
47
49
0
3
19
3
15
20
3
45
1
2
49
3
1
9
30
20
3
19
4
8
125
20
3
97
37
19
5
15
37
19
6
15
15
2
15
45
4
5
20
0
20
5
49
6
2
19
7
15
45
4
7
20
0
20
6
49
6
2
19
8
15
20
7
20
8
49
8
1
15
20
8
20
7
49
8
1
15
20
7
5
48
9
49
10
0
49
11
1
15
20
8
5
48
9
49
10
0
49
11
1
15
20
7
49
12
0
15
20
8
49
12
0
15
20
7
11
15
20
4
77
83
13
9
146
5
7
14
64
47
49
15
1
15
1
11
8
147
1
15
45
4
16
20
0
20
4
49
6
2
19
9
15
20
9
5
48
9
49
10
0
49
11
1
15
20
9
49
12
0
15
20
9
11
11
I
e
I
a
I
3
I
0
I
3
n
p
17
x
12
goto_between
x
6
Fixnum
n
x
8
kind_of?
x
10
BreakPoint
n
x
6
for_ip
n
x
11
paired_with
x
13
current_frame
x
9
variables
x
9
for_step!
x
8
activate
x
2
==
s
19
No place to step to
x
5
error
n
p
49
I
-1
I
108
I
0
I
109
I
e
I
10a
I
18
I
10b
I
1e
I
10d
I
2c
I
10e
I
39
I
10f
I
46
I
111
I
4e
I
112
I
56
I
114
I
62
I
115
I
6e
I
117
I
74
I
118
I
7a
I
11a
I
7d
I
0
I
7e
I
11d
I
85
I
11e
I
8e
I
11f
I
92
I
11d
I
93
I
0
I
94
I
122
I
a1
I
123
I
ad
I
124
I
b3
I
126
I
b7
x
33
lib/rubinius/debugger/commands.rb
p
10
x
4
exec
x
8
start_ip
x
6
fin_ip
x
3
ips
x
2
ip
x
3
one
x
3
two
x
3
bp1
x
3
bp2
x
2
bp
x
16
next_interesting
M
1
n
n
x
16
next_interesting
i
46
45
0
1
43
2
49
3
0
7
4
49
5
1
19
2
15
20
0
49
6
0
20
1
49
5
1
20
2
83
7
9
40
20
1
79
81
8
11
8
41
1
15
20
1
11
11
I
5
I
3
I
2
I
0
I
2
n
p
9
x
8
Rubinius
n
x
14
InstructionSet
x
11
opcodes_map
x
3
pop
x
2
[]
x
4
iseq
x
2
==
x
1
+
p
15
I
-1
I
129
I
0
I
12a
I
10
I
12c
I
20
I
12d
I
28
I
12c
I
29
I
0
I
2a
I
130
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
3
x
4
exec
x
2
ip
x
3
pop
x
12
goto_between
M
1
n
n
x
12
goto_between
i
211
45
0
1
43
2
49
3
0
7
4
49
5
1
19
3
15
45
0
6
43
2
49
3
0
7
7
49
5
1
19
4
15
45
0
8
43
2
49
3
0
7
9
49
5
1
19
5
15
20
0
49
10
0
19
6
15
20
1
19
7
15
20
7
20
2
84
11
9
198
20
6
20
7
49
5
1
19
8
15
20
8
13
20
3
12
49
12
1
9
111
15
5
20
0
20
6
20
7
79
81
13
49
5
1
47
49
14
2
11
8
194
13
20
4
12
49
12
1
10
131
13
20
5
12
49
12
1
10
131
8
166
15
5
20
0
20
6
20
7
79
81
13
49
5
1
47
49
14
2
5
20
0
20
7
80
81
13
47
49
14
2
35
2
11
8
194
15
45
0
15
43
2
20
8
49
5
1
19
8
15
20
7
20
8
49
16
0
79
81
13
81
13
19
7
15
68
8
61
1
15
5
20
0
20
2
47
49
14
2
11
11
I
e
I
9
I
3
I
0
I
3
n
p
17
x
8
Rubinius
n
x
14
InstructionSet
x
11
opcodes_map
x
4
goto
x
2
[]
n
x
12
goto_if_true
n
x
13
goto_if_false
x
4
iseq
x
1
<
x
3
===
x
1
+
x
16
next_interesting
n
x
9
arg_count
p
37
I
-1
I
133
I
0
I
134
I
10
I
135
I
20
I
136
I
30
I
138
I
38
I
13a
I
3d
I
13b
I
45
I
13c
I
4f
I
13d
I
51
I
13e
I
5b
I
13f
I
6f
I
140
I
84
I
141
I
95
I
142
I
a7
I
144
I
b4
I
145
I
c2
I
0
I
c8
I
149
I
d3
x
33
lib/rubinius/debugger/commands.rb
p
9
x
4
exec
x
5
start
x
3
fin
x
4
goto
x
3
git
x
3
gif
x
4
iseq
x
1
i
x
2
op
p
19
I
2
I
c9
I
e
I
ca
I
17
I
cb
I
20
I
d7
I
2e
I
e7
I
3c
I
f7
I
4a
I
108
I
58
I
129
I
66
I
133
I
74
x
33
lib/rubinius/debugger/commands.rb
p
0
x
8
StepInto
n
M
1
n
n
x
8
StepInto
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
1
s
s
4
step
x
7
pattern
s
42
Step into next method call or to next line
x
4
help
s
113
Behaves like next, but if there is a method call on the current line,
execption is stopped in the called method.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
29
5
79
47
49
0
1
19
1
15
5
2
47
49
1
1
15
20
1
9
27
20
1
49
2
0
8
28
1
11
I
4
I
2
I
1
I
0
I
1
n
p
3
x
12
step_over_by
x
6
listen
x
7
remove!
p
11
I
-1
I
156
I
0
I
157
I
9
I
159
I
10
I
15c
I
1c
I
0
I
1d
x
33
lib/rubinius/debugger/commands.rb
p
2
x
4
args
x
3
max
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
14f
I
e
I
150
I
17
I
151
I
20
I
156
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
15
NextInstruction
n
M
1
n
n
x
15
NextInstruction
i
60
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
15
99
7
11
7
12
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
13
s
2
ni
s
5
nexti
x
7
pattern
s
37
Move to the next bytecode instruction
x
4
help
s
101
Continue but stop execution at the next bytecode instruction.

Does not step into send instructions.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
176
20
0
13
9
17
15
20
0
49
0
0
10
16
2
8
17
3
9
28
20
0
49
1
0
19
1
8
31
79
19
1
15
5
48
2
19
2
15
45
3
4
43
5
20
2
49
6
0
5
48
7
49
8
0
49
9
1
49
9
1
19
3
15
5
48
7
49
8
0
20
3
49
10
0
81
11
19
4
15
20
4
20
2
49
6
0
49
12
0
49
13
1
9
99
5
48
14
8
171
5
20
2
5
48
7
49
8
0
47
49
15
2
9
131
5
20
2
5
48
7
49
8
0
20
4
47
49
16
3
8
171
20
2
20
4
49
17
1
19
5
15
45
18
19
20
2
20
4
49
20
2
19
6
15
20
6
5
48
7
49
21
0
49
22
1
15
20
6
49
23
0
15
5
48
24
11
I
b
I
7
I
1
I
0
I
1
n
p
25
x
6
empty?
x
4
to_i
x
14
current_method
x
8
Rubinius
n
x
14
InstructionSet
x
4
iseq
x
13
current_frame
x
2
ip
x
2
[]
x
5
width
x
1
+
x
4
size
x
2
>=
x
14
step_to_parent
x
9
is_a_goto
x
23
set_breakpoints_between
x
12
line_from_ip
x
10
BreakPoint
n
x
6
for_ip
x
9
variables
x
9
for_step!
x
8
activate
x
6
listen
p
37
I
-1
I
16a
I
0
I
16b
I
13
I
16c
I
1c
I
16e
I
1f
I
0
I
20
I
171
I
26
I
172
I
3f
I
174
I
4f
I
176
I
5e
I
177
I
63
I
178
I
72
I
179
I
83
I
17b
I
8d
I
17d
I
9a
I
17e
I
a6
I
17f
I
ab
I
0
I
ac
I
182
I
b0
x
33
lib/rubinius/debugger/commands.rb
p
7
x
4
args
x
4
step
x
4
exec
x
4
insn
x
7
next_ip
x
4
line
x
2
bp
x
17
method_visibility
x
15
add_defn_method
x
9
is_a_goto
M
1
n
n
x
9
is_a_goto
i
103
45
0
1
43
2
49
3
0
7
4
49
5
1
19
2
15
45
0
6
43
2
49
3
0
7
7
49
5
1
19
3
15
45
0
8
43
2
49
3
0
7
9
49
5
1
19
4
15
20
0
49
10
0
20
1
49
5
1
19
5
15
20
5
13
20
2
12
49
11
1
10
92
13
20
3
12
49
11
1
10
92
13
20
4
12
49
11
1
10
92
8
97
15
2
11
8
99
15
1
15
3
11
11
I
9
I
6
I
2
I
0
I
2
n
p
12
x
8
Rubinius
n
x
14
InstructionSet
x
11
opcodes_map
x
4
goto
x
2
[]
n
x
12
goto_if_true
n
x
13
goto_if_false
x
4
iseq
x
3
===
p
23
I
-1
I
185
I
0
I
186
I
10
I
187
I
20
I
188
I
30
I
18a
I
3d
I
18c
I
3f
I
18d
I
5d
I
18e
I
62
I
18c
I
63
I
0
I
64
I
191
I
67
x
33
lib/rubinius/debugger/commands.rb
p
6
x
4
exec
x
2
ip
x
4
goto
x
3
git
x
3
gif
x
1
i
p
11
I
2
I
162
I
e
I
163
I
17
I
164
I
20
I
16a
I
2e
I
185
I
3c
x
33
lib/rubinius/debugger/commands.rb
p
0
x
8
SetFrame
n
M
1
n
n
x
8
SetFrame
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
1
f
s
5
frame
x
7
pattern
s
57
Make a specific frame in the call stack the current frame
x
4
help
s
131
The argument must be a number corrisponding to the frame numbers reported by
'bt'.

The frame specified is made the current frame.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
124
7
0
13
70
9
18
15
44
43
1
7
2
78
49
3
2
6
0
20
0
49
4
1
19
1
9
30
1
8
47
5
7
5
20
0
47
101
6
63
2
47
49
7
1
15
1
11
15
20
1
79
49
8
1
49
9
0
19
2
15
20
2
39
10
49
11
0
49
12
0
49
13
1
9
96
5
7
14
20
2
47
101
6
7
15
63
3
47
49
7
1
15
1
11
8
97
1
15
39
10
20
2
49
16
1
15
5
5
48
17
49
18
0
47
49
19
1
15
39
10
49
20
0
11
I
7
I
3
I
1
I
0
I
1
n
p
21
n
x
6
Regexp
s
5
(\d+)
x
3
new
x
5
match
s
22
Invalid frame number: 
x
4
to_s
x
5
error
x
2
[]
x
4
to_i
x
9
@debugger
x
9
locations
x
4
size
x
2
>=
s
6
Frame 
s
8
 too big
x
9
set_frame
x
13
current_frame
x
8
describe
x
4
info
x
9
show_code
p
29
I
-1
I
19f
I
0
I
1a0
I
1e
I
1a1
I
2d
I
1a2
I
2f
I
0
I
30
I
1a5
I
3c
I
1a7
I
4b
I
1a8
I
5c
I
1a9
I
60
I
1a7
I
61
I
0
I
62
I
1ac
I
6a
I
1ae
I
76
I
1af
I
7c
x
33
lib/rubinius/debugger/commands.rb
p
3
x
4
args
x
1
m
x
3
num
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
196
I
e
I
197
I
17
I
198
I
20
I
19f
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
8
Continue
n
M
1
n
n
x
8
Continue
i
49
5
66
5
7
0
64
7
1
64
7
2
64
47
49
3
3
15
5
7
4
64
47
49
5
1
15
5
7
6
64
47
49
7
1
15
99
7
8
7
9
65
67
49
10
0
49
11
4
11
I
5
I
0
I
0
I
0
I
0
n
p
12
s
1
c
s
4
cont
s
8
continue
x
7
pattern
s
34
Continue running the target thread
x
4
help
s
52
Continue execution until another breakpoint is hit.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
4
5
48
0
11
I
2
I
1
I
1
I
0
I
1
n
p
1
x
6
listen
p
5
I
-1
I
1ba
I
0
I
1bb
I
4
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
args
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
1b4
I
11
I
1b5
I
1a
I
1b6
I
23
I
1ba
I
31
x
33
lib/rubinius/debugger/commands.rb
p
0
x
9
Backtrace
n
M
1
n
n
x
9
Backtrace
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
2
bt
s
9
backtrace
x
7
pattern
s
27
Show the current call stack
x
4
help
s
117
Show the call stack as a simple list.

Passing "-v" will also show the values of all locals variables
in each frame.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
90
20
0
7
0
13
70
9
20
15
44
43
1
7
2
78
49
3
2
6
0
49
4
1
19
1
15
7
5
13
70
9
44
15
44
43
1
7
6
78
49
3
2
6
5
20
0
49
7
1
19
2
9
66
20
2
79
49
8
1
49
9
0
19
3
8
69
1
19
3
15
5
7
10
64
47
49
11
1
15
39
12
5
48
13
56
14
50
15
1
11
I
8
I
4
I
1
I
0
I
1
n
p
16
n
x
6
Regexp
s
2
-v
x
3
new
x
2
=~
n
s
5
(\d+)
x
5
match
x
2
[]
x
4
to_i
s
10
Backtrace:
x
4
info
x
9
@debugger
x
13
current_frame
M
1
p
2
x
9
for_block
t
n
x
3
run
i
73
57
19
0
15
21
1
3
13
9
22
15
20
0
49
0
0
21
1
3
49
1
1
9
28
1
31
8
29
1
15
5
7
2
64
20
0
49
0
0
20
0
49
3
0
35
2
49
4
1
47
49
5
1
15
21
1
1
9
71
20
0
49
6
0
56
7
50
8
0
8
72
1
11
I
6
I
1
I
1
I
0
I
1
n
p
9
x
6
number
x
2
>=
s
6
%4d %s
x
8
describe
x
1
%
x
4
info
x
15
local_variables
M
1
p
2
x
9
for_block
t
n
x
3
run
i
38
57
19
0
15
5
7
0
20
0
47
101
1
7
2
21
1
0
20
0
49
1
0
49
3
1
49
4
0
47
101
1
63
4
47
49
5
1
11
I
8
I
1
I
1
I
0
I
1
n
p
6
s
7
       
x
4
to_s
s
3
 = 
x
3
run
x
7
inspect
x
4
info
p
5
I
0
I
1da
I
4
I
1db
I
26
x
33
lib/rubinius/debugger/commands.rb
p
1
x
5
local
x
4
each
p
17
I
0
I
1d4
I
4
I
1d5
I
1d
I
0
I
1e
I
1d7
I
36
I
1d9
I
3b
I
1da
I
47
I
1d9
I
48
I
0
I
49
x
33
lib/rubinius/debugger/commands.rb
p
1
x
5
frame
x
10
each_frame
p
17
I
-1
I
1c9
I
0
I
1ca
I
1a
I
1cc
I
35
I
1cd
I
42
I
1cf
I
45
I
0
I
46
I
1d2
I
4f
I
1d4
I
5a
x
33
lib/rubinius/debugger/commands.rb
p
4
x
4
args
x
7
verbose
x
1
m
x
5
count
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
1c0
I
e
I
1c1
I
17
I
1c2
I
20
I
1c9
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
8
EvalCode
n
M
1
n
n
x
8
EvalCode
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
1
p
s
4
eval
x
7
pattern
s
31
Run code in the current context
x
4
help
s
224
Run code in the context of the current frame.

The value of the expression is stored into a global variable so it
may be used again easily. The name of the global variable is printed
next to the inspect output of the value.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
8
39
0
20
0
49
1
1
11
I
3
I
1
I
1
I
0
I
1
n
p
2
x
9
@debugger
x
9
eval_code
p
5
I
-1
I
1ed
I
0
I
1ee
I
8
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
args
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
1e3
I
e
I
1e4
I
17
I
1e5
I
20
I
1ed
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
11
Disassemble
n
M
1
n
n
x
11
Disassemble
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
3
dis
s
11
disassemble
x
7
pattern
s
48
Show the bytecode for the current line or method
x
4
help
s
180
Disassemble bytecode for the current method. By default, the bytecode
for the current line is disassembled only.

If the argument is 'all', the entire method is shown as bytecode.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
59
20
0
13
9
16
15
20
0
49
0
0
7
1
64
83
2
9
53
5
7
3
5
48
4
49
5
0
49
6
0
47
101
7
63
2
47
49
8
1
15
5
5
48
9
49
10
0
47
49
11
1
8
58
39
12
49
13
0
11
I
4
I
1
I
1
I
0
I
1
n
p
14
x
5
strip
s
3
all
x
2
==
s
13
Bytecode for 
x
13
current_frame
x
6
method
x
4
name
x
4
to_s
x
7
section
x
14
current_method
x
6
decode
x
4
puts
x
9
@debugger
x
13
show_bytecode
p
13
I
-1
I
1fc
I
0
I
1fd
I
12
I
1fe
I
28
I
1ff
I
35
I
201
I
3a
I
0
I
3b
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
args
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
1f3
I
e
I
1f4
I
17
I
1f5
I
20
I
1fc
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
8
ShowInfo
n
M
1
n
n
x
8
ShowInfo
i
46
5
66
5
7
0
64
7
1
64
47
49
2
2
15
5
7
3
64
47
49
4
1
15
5
7
5
64
47
49
6
1
15
99
7
7
7
8
65
67
49
9
0
49
10
4
11
I
5
I
0
I
0
I
0
I
0
n
p
11
s
1
i
s
4
info
x
7
pattern
s
29
Show information about things
x
4
help
s
64
Subcommands are:
  break, breakpoints, bp: List all breakpoints

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
113
20
0
9
104
20
0
49
0
0
13
7
1
64
12
49
2
1
10
41
13
7
3
64
12
49
2
1
10
41
13
7
4
64
12
49
2
1
10
41
8
85
15
5
7
5
64
47
49
6
1
15
39
7
49
8
0
49
9
0
9
71
5
7
10
64
47
49
11
1
8
72
1
15
39
7
49
8
0
56
12
50
13
0
8
102
15
5
7
14
20
0
47
101
15
7
16
63
3
47
49
17
1
8
112
5
7
18
64
47
49
17
1
11
I
5
I
1
I
1
I
0
I
1
n
p
19
x
5
strip
s
5
break
x
3
===
s
11
breakpoints
s
2
bp
s
11
Breakpoints
x
7
section
x
9
@debugger
x
11
breakpoints
x
6
empty?
s
18
No breakpoints set
x
4
info
M
1
p
2
x
9
for_block
t
n
x
3
run
i
41
58
37
19
0
15
37
19
1
15
15
20
0
9
39
5
7
0
64
20
1
79
81
1
20
0
49
2
0
35
2
49
3
1
47
49
4
1
8
40
1
11
I
7
I
2
I
2
I
0
I
2
n
p
5
s
7
%3d: %s
x
1
+
x
8
describe
x
1
%
x
4
info
p
11
I
0
I
217
I
a
I
218
I
e
I
219
I
27
I
218
I
28
I
0
I
29
x
33
lib/rubinius/debugger/commands.rb
p
2
x
2
bp
x
1
i
x
15
each_with_index
s
15
Unknown info: '
x
4
to_s
s
1
'
x
5
error
s
18
No info subcommand
p
29
I
-1
I
20e
I
0
I
20f
I
4
I
210
I
9
I
211
I
2a
I
212
I
33
I
213
I
3d
I
214
I
47
I
213
I
48
I
0
I
49
I
217
I
56
I
21d
I
66
I
0
I
68
I
220
I
70
I
0
I
71
x
33
lib/rubinius/debugger/commands.rb
p
1
x
4
args
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
207
I
e
I
208
I
17
I
209
I
20
I
20e
I
2e
x
33
lib/rubinius/debugger/commands.rb
p
0
x
11
SetVariable
n
M
1
n
n
x
11
SetVariable
i
43
5
66
5
7
0
64
47
49
1
1
15
5
7
2
64
47
49
3
1
15
5
7
4
64
47
49
5
1
15
99
7
6
7
7
65
67
49
8
0
49
9
4
11
I
5
I
0
I
0
I
0
I
0
n
p
10
s
3
set
x
7
pattern
s
30
Set a debugger config variable
x
4
help
s
72
Set a debugger configuration variable. Use 'show' to see all variables.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
235
20
0
7
0
13
70
9
20
15
44
43
1
7
2
78
49
3
2
6
0
80
49
4
2
97
37
19
1
15
37
19
2
15
15
2
15
20
2
9
186
20
2
49
5
0
13
7
6
64
12
49
7
1
10
87
13
7
8
64
12
49
7
1
10
87
13
7
9
64
12
49
7
1
10
87
13
7
10
64
12
49
7
1
10
87
8
93
15
2
19
2
8
184
13
7
11
64
12
49
7
1
10
125
13
7
12
64
12
49
7
1
10
125
13
7
13
64
12
49
7
1
10
125
8
131
15
3
19
2
8
184
13
7
14
64
12
49
7
1
9
147
15
1
19
2
8
184
13
7
15
13
70
9
166
15
44
43
1
7
16
78
49
3
2
6
15
12
49
7
1
9
182
15
20
2
49
17
0
19
2
8
184
15
1
8
189
2
19
2
15
5
7
18
20
1
47
101
19
7
20
20
2
49
21
0
47
101
19
63
4
47
49
22
1
15
39
23
49
24
0
20
1
49
25
0
20
2
13
18
3
49
26
2
15
11
I
8
I
3
I
1
I
0
I
1
n
p
27
n
x
6
Regexp
s
3
\s+
x
3
new
x
5
split
x
5
strip
s
4
true
x
3
===
s
2
on
s
3
yes
s
0

s
5
false
s
3
off
s
2
no
s
3
nil
n
s
3
\d+
x
4
to_i
s
5
Set '
x
4
to_s
s
4
' = 
x
7
inspect
x
4
info
x
9
@debugger
x
9
variables
x
6
to_sym
x
3
[]=
p
37
I
-1
I
22c
I
0
I
22d
I
24
I
22f
I
28
I
230
I
2d
I
231
I
58
I
232
I
5d
I
233
I
7e
I
234
I
83
I
235
I
8e
I
236
I
93
I
237
I
ad
I
238
I
b7
I
230
I
b8
I
0
I
ba
I
23b
I
bd
I
0
I
be
I
23e
I
d7
I
240
I
eb
x
33
lib/rubinius/debugger/commands.rb
p
3
x
4
args
x
3
var
x
3
val
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
226
I
b
I
227
I
14
I
228
I
1d
I
22c
I
2b
x
33
lib/rubinius/debugger/commands.rb
p
0
x
12
ShowVariable
n
M
1
n
n
x
12
ShowVariable
i
43
5
66
5
7
0
64
47
49
1
1
15
5
7
2
64
47
49
3
1
15
5
7
4
64
47
49
5
1
15
99
7
6
7
7
65
67
49
8
0
49
9
4
11
I
5
I
0
I
0
I
0
I
0
n
p
10
s
4
show
x
7
pattern
s
44
Display the value of a variable or variables
x
4
help
s
159
Show debugger variables and user created variables. By default,
shows all variables.

The optional argument is which variable specificly to show the value of.

x
8
ext_help
x
3
run
M
1
n
n
x
3
run
i
143
20
0
10
7
2
8
8
3
13
10
20
15
20
0
49
0
0
49
1
0
9
73
5
48
2
56
3
50
4
0
15
39
5
49
6
0
78
85
7
9
70
5
7
8
64
47
49
9
1
15
44
43
10
78
39
5
49
6
0
2
49
11
3
56
12
50
4
0
8
71
1
8
142
20
0
49
0
0
49
13
0
19
1
15
5
48
2
20
1
49
14
1
9
126
5
7
15
20
1
47
101
16
7
17
5
48
2
20
1
49
18
1
49
19
0
47
101
16
63
4
47
49
20
1
8
142
5
7
21
20
1
47
101
16
7
22
63
3
47
49
23
1
11
I
8
I
2
I
1
I
0
I
1
n
p
24
x
5
strip
x
6
empty?
x
9
variables
M
1
p
2
x
9
for_block
t
n
x
3
run
i
35
58
37
19
0
15
37
19
1
15
15
5
7
0
20
0
47
101
1
7
2
20
1
49
3
0
47
101
1
63
4
47
49
4
1
11
I
8
I
2
I
2
I
0
I
2
n
p
5
s
5
var '
x
4
to_s
s
4
' = 
x
7
inspect
x
4
info
p
5
I
0
I
250
I
a
I
251
I
23
x
33
lib/rubinius/debugger/commands.rb
p
2
x
4
name
x
3
val
x
4
each
x
9
@debugger
x
14
user_variables
x
1
>
s
14
User variables
x
7
section
x
5
Range
x
3
new
M
1
p
2
x
9
for_block
t
n
x
3
run
i
57
57
19
0
15
7
0
20
0
47
101
1
63
2
19
1
15
45
2
3
43
4
20
1
49
5
0
49
6
1
19
2
15
5
7
7
20
1
47
101
1
7
8
20
2
49
9
0
47
101
1
63
4
47
49
10
1
11
I
9
I
3
I
1
I
0
I
1
n
p
11
s
2
$d
x
4
to_s
x
8
Rubinius
n
x
7
Globals
x
6
to_sym
x
2
[]
s
4
var 
s
3
 = 
x
7
inspect
x
4
info
p
9
I
0
I
256
I
4
I
257
I
10
I
258
I
20
I
259
I
39
x
33
lib/rubinius/debugger/commands.rb
p
3
x
1
i
x
3
str
x
3
val
x
6
to_sym
x
4
key?
s
5
var '
x
4
to_s
s
4
' = 
x
2
[]
x
7
inspect
x
4
info
s
23
No variable set named '
s
1
'
x
5
error
p
27
I
-1
I
24e
I
0
I
24f
I
16
I
250
I
1f
I
254
I
29
I
255
I
32
I
256
I
46
I
254
I
47
I
0
I
49
I
25d
I
54
I
25e
I
5e
I
25f
I
7e
I
261
I
8e
I
0
I
8f
x
33
lib/rubinius/debugger/commands.rb
p
2
x
4
args
x
3
var
x
17
method_visibility
x
15
add_defn_method
p
9
I
2
I
245
I
b
I
246
I
14
I
247
I
1d
I
24e
I
2b
x
33
lib/rubinius/debugger/commands.rb
p
0
p
59
I
2
I
11
I
f
I
13
I
14
I
15
I
1f
I
19
I
2a
I
1d
I
35
I
22
I
40
I
26
I
4b
I
2a
I
56
I
2e
I
64
I
32
I
72
I
36
I
80
I
3a
I
8e
I
3e
I
9c
I
42
I
aa
I
4b
I
c7
I
67
I
e4
I
a8
I
101
I
b2
I
11e
I
c8
I
13b
I
14e
I
158
I
161
I
175
I
195
I
192
I
1b3
I
1af
I
1bf
I
1cc
I
1e2
I
1e9
I
1f2
I
206
I
206
I
223
I
225
I
240
I
244
I
25d
x
33
lib/rubinius/debugger/commands.rb
p
0
p
5
I
2
I
4
I
1d
I
10
I
38
x
33
lib/rubinius/debugger/commands.rb
p
0
x
13
attach_method
p
5
I
0
I
1
I
9
I
3
I
28
x
33
lib/rubinius/debugger/commands.rb
p
0
