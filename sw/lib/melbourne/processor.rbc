!RBIX
4472690874163217065
18
M
1
n
n
x
10
__script__
i
28
99
7
0
65
49
1
2
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
2
11
I
6
I
0
I
0
I
0
I
0
n
p
5
x
8
Rubinius
x
11
open_module
x
15
__module_init__
M
1
n
n
x
8
Rubinius
i
58
5
66
99
7
0
1
65
49
1
3
13
99
12
7
2
12
7
3
12
65
12
49
4
4
15
49
2
0
15
99
7
5
45
0
6
65
49
1
3
13
99
12
7
2
12
7
7
12
65
12
49
4
4
15
49
2
0
11
I
6
I
0
I
0
I
0
I
0
n
p
8
x
9
Melbourne
x
10
open_class
x
14
__class_init__
M
1
n
n
x
9
Melbourne
i
1402
5
66
99
7
0
7
1
65
67
49
2
0
49
3
4
15
99
7
4
7
5
65
67
49
2
0
49
3
4
15
99
7
6
7
7
65
67
49
2
0
49
3
4
15
99
7
8
7
9
65
67
49
2
0
49
3
4
15
99
7
10
7
11
65
67
49
2
0
49
3
4
15
99
7
12
7
13
65
67
49
2
0
49
3
4
15
99
7
14
7
15
65
67
49
2
0
49
3
4
15
99
7
16
7
17
65
67
49
2
0
49
3
4
15
99
7
18
7
19
65
67
49
2
0
49
3
4
15
99
7
20
7
21
65
67
49
2
0
49
3
4
15
99
7
22
7
23
65
67
49
2
0
49
3
4
15
99
7
24
7
25
65
67
49
2
0
49
3
4
15
99
7
26
7
27
65
67
49
2
0
49
3
4
15
99
7
28
7
29
65
67
49
2
0
49
3
4
15
99
7
30
7
31
65
67
49
2
0
49
3
4
15
99
7
32
7
33
65
67
49
2
0
49
3
4
15
99
7
34
7
35
65
67
49
2
0
49
3
4
15
99
7
36
7
37
65
67
49
2
0
49
3
4
15
99
7
38
7
39
65
67
49
2
0
49
3
4
15
99
7
40
7
41
65
67
49
2
0
49
3
4
15
99
7
42
7
43
65
67
49
2
0
49
3
4
15
99
7
44
7
45
65
67
49
2
0
49
3
4
15
99
7
46
7
47
65
67
49
2
0
49
3
4
15
99
7
48
7
49
65
67
49
2
0
49
3
4
15
99
7
50
7
51
65
67
49
2
0
49
3
4
15
99
7
52
7
53
65
67
49
2
0
49
3
4
15
99
7
54
7
55
65
67
49
2
0
49
3
4
15
99
7
56
7
57
65
67
49
2
0
49
3
4
15
99
7
58
7
59
65
67
49
2
0
49
3
4
15
99
7
60
7
61
65
67
49
2
0
49
3
4
15
99
7
62
7
63
65
67
49
2
0
49
3
4
15
99
7
64
7
65
65
67
49
2
0
49
3
4
15
99
7
66
7
67
65
67
49
2
0
49
3
4
15
99
7
68
7
69
65
67
49
2
0
49
3
4
15
99
7
70
7
71
65
67
49
2
0
49
3
4
15
99
7
72
7
73
65
67
49
2
0
49
3
4
15
99
7
74
7
75
65
67
49
2
0
49
3
4
15
99
7
76
7
77
65
67
49
2
0
49
3
4
15
99
7
78
7
79
65
67
49
2
0
49
3
4
15
99
7
80
7
81
65
67
49
2
0
49
3
4
15
99
7
82
7
83
65
67
49
2
0
49
3
4
15
99
7
84
7
85
65
67
49
2
0
49
3
4
15
99
7
86
7
87
65
67
49
2
0
49
3
4
15
99
7
88
7
89
65
67
49
2
0
49
3
4
15
99
7
90
7
91
65
67
49
2
0
49
3
4
15
99
7
92
7
93
65
67
49
2
0
49
3
4
15
99
7
94
7
95
65
67
49
2
0
49
3
4
15
99
7
96
7
97
65
67
49
2
0
49
3
4
15
99
7
98
7
99
65
67
49
2
0
49
3
4
15
99
7
100
7
101
65
67
49
2
0
49
3
4
15
99
7
102
7
103
65
67
49
2
0
49
3
4
15
99
7
104
7
105
65
67
49
2
0
49
3
4
15
99
7
106
7
107
65
67
49
2
0
49
3
4
15
99
7
108
7
109
65
67
49
2
0
49
3
4
15
99
7
110
7
111
65
67
49
2
0
49
3
4
15
99
7
112
7
113
65
67
49
2
0
49
3
4
15
99
7
114
7
115
65
67
49
2
0
49
3
4
15
99
7
116
7
117
65
67
49
2
0
49
3
4
15
99
7
118
7
119
65
67
49
2
0
49
3
4
15
99
7
120
7
121
65
67
49
2
0
49
3
4
15
99
7
122
7
123
65
67
49
2
0
49
3
4
15
99
7
124
7
125
65
67
49
2
0
49
3
4
15
99
7
126
7
127
65
67
49
2
0
49
3
4
15
99
7
128
7
129
65
67
49
2
0
49
3
4
15
99
7
130
7
131
65
67
49
2
0
49
3
4
15
99
7
132
7
133
65
67
49
2
0
49
3
4
15
99
7
134
7
135
65
67
49
2
0
49
3
4
15
99
7
136
7
137
65
67
49
2
0
49
3
4
15
99
7
138
7
139
65
67
49
2
0
49
3
4
15
99
7
140
7
141
65
67
49
2
0
49
3
4
15
99
7
142
7
143
65
67
49
2
0
49
3
4
15
99
7
144
7
145
65
67
49
2
0
49
3
4
15
99
7
146
7
147
65
67
49
2
0
49
3
4
15
99
7
148
7
149
65
67
49
2
0
49
3
4
15
99
7
150
7
151
65
67
49
2
0
49
3
4
15
99
7
152
7
153
65
67
49
2
0
49
3
4
15
99
7
154
7
155
65
67
49
2
0
49
3
4
15
99
7
156
7
157
65
67
49
2
0
49
3
4
15
99
7
158
7
159
65
67
49
2
0
49
3
4
15
99
7
160
7
161
65
67
49
2
0
49
3
4
15
99
7
162
7
163
65
67
49
2
0
49
3
4
15
99
7
164
7
165
65
67
49
2
0
49
3
4
15
99
7
166
7
167
65
67
49
2
0
49
3
4
15
99
7
168
7
169
65
67
49
2
0
49
3
4
15
99
7
170
7
171
65
67
49
2
0
49
3
4
15
99
7
172
7
173
65
67
49
2
0
49
3
4
15
99
7
174
7
175
65
67
49
2
0
49
3
4
15
99
7
176
7
177
65
67
49
2
0
49
3
4
15
99
7
178
7
179
65
67
49
2
0
49
3
4
15
99
7
180
7
181
65
67
49
2
0
49
3
4
15
99
7
182
7
183
65
67
49
2
0
49
3
4
15
99
7
184
7
185
65
67
49
2
0
49
3
4
15
99
7
186
7
187
65
67
49
2
0
49
3
4
15
99
7
188
7
189
65
67
49
2
0
49
3
4
15
99
7
190
7
191
65
67
49
2
0
49
3
4
15
99
7
192
7
193
65
67
49
2
0
49
3
4
15
99
7
194
7
195
65
67
49
2
0
49
3
4
15
99
7
196
7
197
65
67
49
2
0
49
3
4
15
99
7
198
7
199
65
67
49
2
0
49
3
4
15
99
7
200
7
201
65
67
49
2
0
49
3
4
11
I
5
I
0
I
0
I
0
I
0
n
p
202
x
19
process_parse_error
M
1
n
n
x
19
process_parse_error
i
22
39
0
45
1
2
20
0
20
1
20
2
20
3
39
3
49
4
5
49
5
1
11
I
b
I
4
I
4
I
0
I
4
n
p
6
x
14
@syntax_errors
x
11
SyntaxError
n
x
5
@name
x
4
from
x
2
<<
p
5
I
-1
I
3
I
0
I
4
I
16
x
26
lib/melbourne/processor.rb
p
4
x
7
message
x
6
column
x
4
line
x
6
source
x
17
method_visibility
x
15
add_defn_method
x
21
process_dangling_node
M
1
n
n
x
21
process_dangling_node
i
9
5
7
0
64
47
49
1
1
11
I
2
I
0
I
0
I
0
I
0
n
p
2
s
35
Processing called but node was NULL
x
4
puts
p
5
I
-1
I
7
I
0
I
8
I
9
x
26
lib/melbourne/processor.rb
p
0
x
20
process_missing_node
M
1
n
n
x
20
process_missing_node
i
24
5
7
0
20
1
47
101
1
7
2
20
2
47
101
1
7
3
63
5
47
49
4
1
11
I
9
I
3
I
3
I
0
I
3
n
p
5
s
15
Unhandled node 
x
4
to_s
s
2
 (
s
1
)
x
4
puts
p
5
I
-1
I
e
I
0
I
f
I
18
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
9
node_name
x
9
node_type
x
14
method_missing
M
1
n
n
x
14
method_missing
i
33
5
7
0
20
0
47
101
1
7
2
20
1
56
3
50
4
0
7
5
64
49
6
1
47
101
1
63
4
47
49
7
1
11
I
8
I
2
I
1
I
0
I
1
I
1
p
8
s
13
 *** missing 
x
4
to_s
s
1
 
M
1
p
2
x
9
for_block
t
n
x
14
method_missing
i
10
57
19
0
15
20
0
49
0
0
11
I
3
I
1
I
1
I
0
I
1
n
p
1
x
7
inspect
p
3
I
0
I
14
I
a
x
26
lib/melbourne/processor.rb
p
1
x
1
x
x
3
map
s
2
, 
x
4
join
x
4
puts
p
5
I
-1
I
13
I
0
I
14
I
21
x
26
lib/melbourne/processor.rb
p
2
x
3
sym
x
4
args
x
13
process_alias
M
1
n
n
x
13
process_alias
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
5
Alias
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1a
I
0
I
1b
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
2
to
x
4
from
x
11
process_and
M
1
n
n
x
11
process_and
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
3
And
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1e
I
0
I
1f
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
left
x
5
right
x
12
process_args
M
1
n
n
x
12
process_args
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
15
FormalArguments
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
22
I
0
I
23
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
args
x
8
defaults
x
5
splat
x
15
process_argscat
M
1
n
n
x
15
process_argscat
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
10
ConcatArgs
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
26
I
0
I
27
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
array
x
4
rest
x
16
process_argspush
M
1
n
n
x
16
process_argspush
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
8
PushArgs
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
2a
I
0
I
2b
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
9
arguments
x
5
value
x
13
process_array
M
1
n
n
x
13
process_array
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
12
ArrayLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
2e
I
0
I
2f
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
array
x
16
process_attrasgn
M
1
n
n
x
16
process_attrasgn
i
91
20
2
7
0
83
1
9
48
45
2
3
43
4
13
71
5
47
9
37
47
49
6
0
13
20
0
20
1
20
3
47
49
7
3
15
8
46
20
0
20
1
20
3
49
5
3
8
90
45
2
8
43
9
13
71
5
47
9
79
47
49
6
0
13
20
0
20
1
20
2
20
3
47
49
7
4
15
8
90
20
0
20
1
20
2
20
3
49
5
4
11
I
a
I
4
I
4
I
0
I
4
n
p
10
x
3
[]=
x
2
==
x
3
AST
n
x
17
ElementAssignment
x
3
new
x
8
allocate
x
10
initialize
n
x
19
AttributeAssignment
p
11
I
-1
I
32
I
0
I
33
I
8
I
34
I
30
I
36
I
5a
I
0
I
5b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
8
receiver
x
4
name
x
9
arguments
x
16
process_back_ref
M
1
n
n
x
16
process_back_ref
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
7
BackRef
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
3a
I
0
I
3b
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
ref
x
13
process_begin
M
1
n
n
x
13
process_begin
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
5
Begin
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
3e
I
0
I
3f
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
body
x
13
process_block
M
1
n
n
x
13
process_block
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
5
Block
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
42
I
0
I
43
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
array
x
17
process_block_arg
M
1
n
n
x
17
process_block_arg
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
13
BlockArgument
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
46
I
0
I
47
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
18
process_block_pass
M
1
n
n
x
18
process_block_pass
i
60
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
2
47
49
5
2
15
8
34
20
0
20
2
49
3
2
19
3
15
20
1
9
57
20
1
20
3
13
18
2
49
6
1
15
15
20
1
8
59
20
3
11
I
8
I
4
I
3
I
0
I
3
n
p
7
x
3
AST
n
x
9
BlockPass
x
3
new
x
8
allocate
x
10
initialize
x
6
block=
p
15
I
-1
I
4a
I
0
I
4b
I
25
I
4c
I
29
I
4d
I
35
I
4e
I
39
I
50
I
3b
I
0
I
3c
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
11
method_send
x
4
body
x
4
node
x
13
process_break
M
1
n
n
x
13
process_break
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
5
Break
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
54
I
0
I
55
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
12
process_call
M
1
n
n
x
12
process_call
i
171
20
3
45
0
1
43
2
49
3
1
9
37
20
3
19
4
15
20
4
49
4
0
19
3
15
20
4
1
13
18
2
49
5
1
15
8
40
1
19
4
15
5
20
0
20
1
20
2
20
3
47
49
6
4
19
5
9
63
20
5
11
8
64
1
15
20
3
9
115
45
0
7
43
8
13
71
9
47
9
100
47
49
10
0
13
20
0
20
1
20
2
20
3
47
49
11
4
15
8
111
20
0
20
1
20
2
20
3
49
9
4
19
5
8
155
45
0
12
43
13
13
71
9
47
9
144
47
49
10
0
13
20
0
20
1
20
2
47
49
11
3
15
8
153
20
0
20
1
20
2
49
9
3
19
5
15
20
5
20
4
13
18
2
49
14
1
15
15
20
5
11
I
c
I
6
I
4
I
0
I
4
n
p
15
x
3
AST
n
x
9
BlockPass
x
8
kind_of?
x
9
arguments
x
10
arguments=
x
18
process_transforms
n
x
17
SendWithArguments
x
3
new
x
8
allocate
x
10
initialize
n
x
4
Send
x
6
block=
p
35
I
-1
I
58
I
0
I
59
I
c
I
5a
I
11
I
5b
I
19
I
5c
I
25
I
5e
I
28
I
0
I
29
I
61
I
3a
I
62
I
3f
I
61
I
40
I
0
I
41
I
65
I
45
I
66
I
73
I
68
I
9b
I
0
I
9c
I
6b
I
a8
I
6c
I
ab
x
26
lib/melbourne/processor.rb
p
6
x
4
line
x
8
receiver
x
4
name
x
9
arguments
x
5
block
x
4
node
x
12
process_case
M
1
n
n
x
12
process_case
i
87
20
1
9
48
45
0
1
43
2
13
71
3
47
9
35
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
46
20
0
20
1
20
2
20
3
49
3
4
8
86
45
0
6
43
7
13
71
3
47
9
77
47
49
4
0
13
20
0
20
2
20
3
47
49
5
3
15
8
86
20
0
20
2
20
3
49
3
3
11
I
a
I
4
I
4
I
0
I
4
n
p
8
x
3
AST
n
x
12
ReceiverCase
x
3
new
x
8
allocate
x
10
initialize
n
x
4
Case
p
11
I
-1
I
6f
I
0
I
70
I
4
I
71
I
30
I
73
I
56
I
0
I
57
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
8
receiver
x
5
whens
x
9
else_body
x
13
process_cdecl
M
1
n
n
x
13
process_cdecl
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
18
ConstantAssignment
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
77
I
0
I
78
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
expr
x
5
value
x
13
process_class
M
1
n
n
x
13
process_class
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
5
Class
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
7b
I
0
I
7c
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
name
x
10
superclass
x
4
body
x
14
process_colon2
M
1
n
n
x
14
process_colon2
i
79
20
1
9
44
45
0
1
43
2
13
71
3
47
9
33
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
42
20
0
20
1
20
2
49
3
3
8
78
45
0
6
43
7
13
71
3
47
9
71
47
49
4
0
13
20
0
20
2
47
49
5
2
15
8
78
20
0
20
2
49
3
2
11
I
8
I
3
I
3
I
0
I
3
n
p
8
x
3
AST
n
x
14
ScopedConstant
x
3
new
x
8
allocate
x
10
initialize
n
x
14
ConstantAccess
p
11
I
-1
I
7f
I
0
I
80
I
4
I
81
I
2c
I
83
I
4e
I
0
I
4f
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
outer
x
4
name
x
14
process_colon3
M
1
n
n
x
14
process_colon3
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
16
ToplevelConstant
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
87
I
0
I
88
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
13
process_const
M
1
n
n
x
13
process_const
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
14
ConstantAccess
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
8b
I
0
I
8c
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
12
process_cvar
M
1
n
n
x
12
process_cvar
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
19
ClassVariableAccess
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
8f
I
0
I
90
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
14
process_cvasgn
M
1
n
n
x
14
process_cvasgn
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
23
ClassVariableAssignment
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
93
I
0
I
94
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
5
value
x
14
process_cvdecl
M
1
n
n
x
14
process_cvdecl
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
24
ClassVariableDeclaration
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
97
I
0
I
98
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
5
value
x
15
process_defined
M
1
n
n
x
15
process_defined
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
7
Defined
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
9b
I
0
I
9c
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
expr
x
12
process_defn
M
1
n
n
x
12
process_defn
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
Define
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
9f
I
0
I
a0
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
4
body
x
12
process_defs
M
1
n
n
x
12
process_defs
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
15
DefineSingleton
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
a3
I
0
I
a4
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
8
receiver
x
4
name
x
4
body
x
12
process_dot2
M
1
n
n
x
12
process_dot2
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
5
Range
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
a7
I
0
I
a8
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
start
x
6
finish
x
12
process_dot3
M
1
n
n
x
12
process_dot3
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
12
RangeExclude
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
ab
I
0
I
ac
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
start
x
6
finish
x
13
process_dregx
M
1
n
n
x
13
process_dregx
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
12
DynamicRegex
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
af
I
0
I
b0
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
3
str
x
5
array
x
5
flags
x
18
process_dregx_once
M
1
n
n
x
18
process_dregx_once
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
16
DynamicOnceRegex
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
b3
I
0
I
b4
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
3
str
x
5
array
x
5
flags
x
12
process_dstr
M
1
n
n
x
12
process_dstr
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
13
DynamicString
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
b7
I
0
I
b8
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
3
str
x
5
array
x
12
process_dsym
M
1
n
n
x
12
process_dsym
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
13
DynamicSymbol
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
bb
I
0
I
bc
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
3
str
x
5
array
x
13
process_dxstr
M
1
n
n
x
13
process_dxstr
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
20
DynamicExecuteString
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
bf
I
0
I
c0
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
3
str
x
5
array
x
14
process_ensure
M
1
n
n
x
14
process_ensure
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
Ensure
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
c3
I
0
I
c4
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
body
x
4
ensr
x
13
process_evstr
M
1
n
n
x
13
process_evstr
i
77
20
1
9
40
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
38
20
0
20
1
49
3
2
8
76
45
0
6
43
7
13
71
3
47
9
68
47
49
4
0
13
20
0
7
8
64
47
49
5
2
15
8
76
20
0
7
8
64
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
9
x
3
AST
n
x
8
ToString
x
3
new
x
8
allocate
x
10
initialize
n
x
13
StringLiteral
s
0

p
11
I
-1
I
c7
I
0
I
c8
I
4
I
c9
I
28
I
cb
I
4c
I
0
I
4d
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
13
process_false
M
1
n
n
x
13
process_false
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
12
FalseLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
cf
I
0
I
d0
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
13
process_fcall
M
1
n
n
x
13
process_fcall
i
209
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
19
3
15
20
2
45
0
6
43
7
49
8
1
9
70
20
2
19
4
15
20
4
49
9
0
19
2
15
20
4
1
13
18
2
49
10
1
15
8
73
1
19
4
15
5
20
0
20
3
20
1
20
2
2
47
49
11
5
19
5
9
97
20
5
11
8
98
1
15
20
2
9
151
45
0
12
43
13
13
71
3
47
9
135
47
49
4
0
13
20
0
20
3
20
1
20
2
2
47
49
5
5
15
8
147
20
0
20
3
20
1
20
2
2
49
3
5
19
5
8
193
45
0
14
43
15
13
71
3
47
9
181
47
49
4
0
13
20
0
20
3
20
1
2
47
49
5
4
15
8
191
20
0
20
3
20
1
2
49
3
4
19
5
15
20
5
20
4
13
18
2
49
16
1
15
15
20
5
11
I
d
I
6
I
3
I
0
I
3
n
p
17
x
3
AST
n
x
4
Self
x
3
new
x
8
allocate
x
10
initialize
n
x
9
BlockPass
x
8
kind_of?
x
9
arguments
x
10
arguments=
x
18
process_transforms
n
x
17
SendWithArguments
n
x
4
Send
x
6
block=
p
37
I
-1
I
d3
I
0
I
d4
I
21
I
d6
I
2d
I
d7
I
32
I
d8
I
3a
I
d9
I
46
I
db
I
49
I
0
I
4a
I
de
I
5c
I
df
I
61
I
de
I
62
I
0
I
63
I
e2
I
67
I
e3
I
97
I
e5
I
c1
I
0
I
c2
I
e8
I
ce
I
e9
I
d1
x
26
lib/melbourne/processor.rb
p
6
x
4
line
x
4
name
x
9
arguments
x
8
receiver
x
5
block
x
4
node
x
12
process_file
M
1
n
n
x
12
process_file
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
4
File
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
ec
I
0
I
ed
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
14
process_fixnum
M
1
n
n
x
14
process_fixnum
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
13
FixnumLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
f0
I
0
I
f1
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
13
process_flip2
M
1
n
n
x
13
process_flip2
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
5
Flip2
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
f4
I
0
I
f5
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
start
x
6
finish
x
13
process_flip3
M
1
n
n
x
13
process_flip3
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
5
Flip3
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
f8
I
0
I
f9
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
start
x
6
finish
x
13
process_float
M
1
n
n
x
13
process_float
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
12
FloatLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
fc
I
0
I
fd
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
str
x
11
process_for
M
1
n
n
x
11
process_for
i
92
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
7
5
47
49
6
3
15
8
38
20
0
20
1
7
5
49
3
3
19
4
15
20
4
45
0
7
43
8
13
71
3
47
9
72
47
49
4
0
13
20
0
20
2
20
3
47
49
6
3
15
8
81
20
0
20
2
20
3
49
3
3
13
18
2
49
9
1
15
15
20
4
11
I
b
I
5
I
4
I
0
I
4
n
p
10
x
3
AST
n
x
4
Send
x
3
new
x
8
allocate
x
4
each
x
10
initialize
n
x
3
For
x
6
block=
p
9
I
-1
I
100
I
0
I
101
I
29
I
102
I
59
I
103
I
5c
x
26
lib/melbourne/processor.rb
p
5
x
4
line
x
4
iter
x
9
arguments
x
4
body
x
11
method_send
x
13
process_gasgn
M
1
n
n
x
13
process_gasgn
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
24
GlobalVariableAssignment
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
106
I
0
I
107
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
4
expr
x
12
process_gvar
M
1
n
n
x
12
process_gvar
i
13
45
0
1
43
2
20
0
20
1
49
3
2
11
I
5
I
2
I
2
I
0
I
2
n
p
4
x
3
AST
n
x
20
GlobalVariableAccess
x
8
for_name
p
5
I
-1
I
10a
I
0
I
10b
I
d
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
12
process_hash
M
1
n
n
x
12
process_hash
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
11
HashLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
10e
I
0
I
10f
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
array
x
13
process_iasgn
M
1
n
n
x
13
process_iasgn
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
26
InstanceVariableAssignment
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
112
I
0
I
113
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
5
value
x
10
process_if
M
1
n
n
x
10
process_if
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
2
If
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
116
I
0
I
117
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
cond
x
4
body
x
9
else_body
x
12
process_iter
M
1
n
n
x
12
process_iter
i
51
20
1
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
2
20
3
47
49
5
3
15
8
40
20
0
20
2
20
3
49
3
3
13
18
2
49
6
1
15
15
20
1
11
I
a
I
4
I
4
I
0
I
4
n
p
7
x
3
AST
n
x
4
Iter
x
3
new
x
8
allocate
x
10
initialize
x
6
block=
p
7
I
-1
I
11a
I
0
I
11b
I
30
I
11c
I
33
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
11
method_send
x
9
arguments
x
4
body
x
12
process_ivar
M
1
n
n
x
12
process_ivar
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
22
InstanceVariableAccess
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
11f
I
0
I
120
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
13
process_lasgn
M
1
n
n
x
13
process_lasgn
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
23
LocalVariableAssignment
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
123
I
0
I
124
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
5
value
x
11
process_lit
M
1
n
n
x
11
process_lit
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
13
SymbolLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
127
I
0
I
128
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
sym
x
12
process_lvar
M
1
n
n
x
12
process_lvar
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
19
LocalVariableAccess
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
12b
I
0
I
12c
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
name
x
13
process_masgn
M
1
n
n
x
13
process_masgn
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
18
MultipleAssignment
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
12f
I
0
I
130
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
left
x
5
right
x
5
splat
x
13
process_match
M
1
n
n
x
13
process_match
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
5
Match
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
133
I
0
I
134
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
7
pattern
x
5
flags
x
14
process_match2
M
1
n
n
x
14
process_match2
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
Match2
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
137
I
0
I
138
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
7
pattern
x
5
value
x
14
process_match3
M
1
n
n
x
14
process_match3
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
Match3
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
13b
I
0
I
13c
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
7
pattern
x
5
value
x
14
process_module
M
1
n
n
x
14
process_module
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
Module
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
13f
I
0
I
140
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
name
x
4
body
x
14
process_negate
M
1
n
n
x
14
process_negate
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
6
Negate
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
143
I
0
I
144
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
12
process_next
M
1
n
n
x
12
process_next
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
4
Next
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
147
I
0
I
148
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
11
process_nil
M
1
n
n
x
11
process_nil
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
10
NilLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
14b
I
0
I
14c
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
11
process_not
M
1
n
n
x
11
process_not
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
3
Not
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
14f
I
0
I
150
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
15
process_nth_ref
M
1
n
n
x
15
process_nth_ref
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
6
NthRef
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
153
I
0
I
154
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
ref
x
14
process_number
M
1
n
n
x
14
process_number
i
109
20
2
20
1
49
0
1
19
3
15
20
3
13
45
1
2
12
49
3
1
9
59
15
45
4
5
43
6
13
71
7
47
9
50
47
49
8
0
13
20
0
20
3
47
49
9
2
15
8
57
20
0
20
3
49
7
2
8
108
13
45
10
11
12
49
3
1
9
106
15
45
4
12
43
13
13
71
7
47
9
97
47
49
8
0
13
20
0
20
3
47
49
9
2
15
8
104
20
0
20
3
49
7
2
8
108
15
1
11
I
8
I
4
I
3
I
0
I
3
n
p
14
x
4
to_i
x
6
Fixnum
n
x
3
===
x
3
AST
n
x
13
FixnumLiteral
x
3
new
x
8
allocate
x
10
initialize
x
6
Bignum
n
n
x
13
NumberLiteral
p
19
I
-1
I
158
I
0
I
159
I
a
I
15a
I
c
I
15b
I
17
I
15c
I
3b
I
15d
I
46
I
15e
I
6b
I
15a
I
6c
I
0
I
6d
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
base
x
3
str
x
5
value
x
16
process_op_asgn1
M
1
n
n
x
16
process_op_asgn1
i
47
45
0
1
43
2
13
71
3
47
9
33
47
49
4
0
13
20
0
20
1
20
2
20
3
20
4
47
49
5
5
15
8
46
20
0
20
1
20
2
20
3
20
4
49
3
5
11
I
c
I
5
I
5
I
0
I
5
n
p
6
x
3
AST
n
x
9
OpAssign1
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
162
I
0
I
163
I
2f
x
26
lib/melbourne/processor.rb
p
5
x
4
line
x
8
receiver
x
5
index
x
2
op
x
5
value
x
16
process_op_asgn2
M
1
n
n
x
16
process_op_asgn2
i
47
45
0
1
43
2
13
71
3
47
9
33
47
49
4
0
13
20
0
20
1
20
2
20
3
20
4
47
49
5
5
15
8
46
20
0
20
1
20
2
20
3
20
4
49
3
5
11
I
c
I
5
I
5
I
0
I
5
n
p
6
x
3
AST
n
x
9
OpAssign2
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
166
I
0
I
167
I
2f
x
26
lib/melbourne/processor.rb
p
5
x
4
line
x
8
receiver
x
4
name
x
2
op
x
5
value
x
19
process_op_asgn_and
M
1
n
n
x
19
process_op_asgn_and
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
11
OpAssignAnd
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
16a
I
0
I
16b
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
3
var
x
5
value
x
18
process_op_asgn_or
M
1
n
n
x
18
process_op_asgn_or
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
10
OpAssignOr
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
16e
I
0
I
16f
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
3
var
x
5
value
x
10
process_or
M
1
n
n
x
10
process_or
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
2
Or
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
172
I
0
I
173
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
left
x
5
right
x
15
process_postexe
M
1
n
n
x
15
process_postexe
i
97
45
0
1
43
2
13
71
3
47
9
58
47
49
4
0
13
20
0
45
0
5
43
6
13
71
3
47
9
43
47
49
4
0
13
20
0
47
49
7
1
15
8
48
20
0
49
3
1
7
8
2
47
49
7
4
15
8
96
20
0
45
0
9
43
6
13
71
3
47
9
85
47
49
4
0
13
20
0
47
49
7
1
15
8
90
20
0
49
3
1
7
8
2
49
3
4
11
I
7
I
1
I
1
I
0
I
1
n
p
10
x
3
AST
n
x
4
Send
x
3
new
x
8
allocate
n
x
4
Self
x
10
initialize
x
7
at_exit
n
p
5
I
-1
I
176
I
0
I
177
I
61
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
12
process_redo
M
1
n
n
x
12
process_redo
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
4
Redo
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
17a
I
0
I
17b
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
13
process_regex
M
1
n
n
x
13
process_regex
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
12
RegexLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
17e
I
0
I
17f
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
3
str
x
5
flags
x
15
process_resbody
M
1
n
n
x
15
process_resbody
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
15
RescueCondition
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
182
I
0
I
183
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
10
conditions
x
4
body
x
3
nxt
x
14
process_rescue
M
1
n
n
x
14
process_rescue
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
6
Rescue
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
186
I
0
I
187
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
body
x
11
rescue_body
x
9
else_body
x
13
process_retry
M
1
n
n
x
13
process_retry
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
5
Retry
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
18a
I
0
I
18b
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
14
process_return
M
1
n
n
x
14
process_return
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
6
Return
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
18e
I
0
I
18f
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
14
process_sclass
M
1
n
n
x
14
process_sclass
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
SClass
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
192
I
0
I
193
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
8
receiver
x
4
body
x
13
process_scope
M
1
n
n
x
13
process_scope
i
62
20
1
45
0
1
43
2
49
3
1
9
16
20
1
8
61
20
1
9
60
45
0
4
43
2
13
71
5
47
9
49
47
49
6
0
13
20
0
20
1
35
1
47
49
7
2
15
8
58
20
0
20
1
35
1
49
5
2
8
61
1
11
I
6
I
2
I
2
I
0
I
2
n
p
8
x
3
AST
n
x
5
Block
x
8
kind_of?
n
x
3
new
x
8
allocate
x
10
initialize
p
15
I
-1
I
196
I
0
I
197
I
c
I
198
I
10
I
199
I
14
I
19a
I
3c
I
199
I
3d
I
0
I
3e
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
body
x
12
process_self
M
1
n
n
x
12
process_self
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
4
Self
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
19e
I
0
I
19f
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
13
process_splat
M
1
n
n
x
13
process_splat
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
10
SplatValue
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1a2
I
0
I
1a3
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
expr
x
11
process_str
M
1
n
n
x
11
process_str
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
13
StringLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1a6
I
0
I
1a7
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
str
x
13
process_super
M
1
n
n
x
13
process_super
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
5
Super
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1aa
I
0
I
1ab
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
9
arguments
x
14
process_svalue
M
1
n
n
x
14
process_svalue
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
6
SValue
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1ae
I
0
I
1af
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
expr
x
14
process_to_ary
M
1
n
n
x
14
process_to_ary
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
7
ToArray
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1b2
I
0
I
1b3
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
4
expr
x
12
process_true
M
1
n
n
x
12
process_true
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
11
TrueLiteral
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1b6
I
0
I
1b7
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
13
process_undef
M
1
n
n
x
13
process_undef
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
5
Undef
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1ba
I
0
I
1bb
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
sym
x
13
process_until
M
1
n
n
x
13
process_until
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
5
Until
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1be
I
0
I
1bf
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
cond
x
4
body
x
11
check_first
x
13
process_vcall
M
1
n
n
x
13
process_vcall
i
100
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
19
2
15
5
20
0
20
2
20
1
1
2
47
49
6
5
19
3
9
55
20
3
11
8
56
1
15
45
0
7
43
8
13
71
3
47
9
88
47
49
4
0
13
20
0
20
2
20
1
2
2
47
49
5
5
15
8
99
20
0
20
2
20
1
2
2
49
3
5
11
I
b
I
4
I
2
I
0
I
2
n
p
9
x
3
AST
n
x
4
Self
x
3
new
x
8
allocate
x
10
initialize
x
18
process_transforms
n
x
4
Send
p
15
I
-1
I
1c2
I
0
I
1c3
I
21
I
1c5
I
32
I
1c6
I
37
I
1c5
I
38
I
0
I
39
I
1c9
I
64
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
name
x
8
receiver
x
4
node
x
14
process_valias
M
1
n
n
x
14
process_valias
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
6
VAlias
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1cc
I
0
I
1cd
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
2
to
x
4
from
x
14
process_values
M
1
n
n
x
14
process_values
i
14
20
2
49
0
0
20
1
49
1
1
15
20
2
11
I
5
I
3
I
3
I
0
I
3
n
p
2
x
4
body
x
7
unshift
p
7
I
-1
I
1d0
I
0
I
1d1
I
b
I
1d2
I
e
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
5
first
x
4
rest
x
12
process_when
M
1
n
n
x
12
process_when
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
4
When
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1d5
I
0
I
1d6
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
10
conditions
x
4
body
x
13
process_while
M
1
n
n
x
13
process_while
i
43
45
0
1
43
2
13
71
3
47
9
31
47
49
4
0
13
20
0
20
1
20
2
20
3
47
49
5
4
15
8
42
20
0
20
1
20
2
20
3
49
3
4
11
I
a
I
4
I
4
I
0
I
4
n
p
6
x
3
AST
n
x
5
While
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1d9
I
0
I
1da
I
2b
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
4
cond
x
4
body
x
11
check_first
x
12
process_xstr
M
1
n
n
x
12
process_xstr
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
13
ExecuteString
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1dd
I
0
I
1de
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
3
str
x
13
process_yield
M
1
n
n
x
13
process_yield
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
5
Yield
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1e1
I
0
I
1e2
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
9
arguments
x
6
unwrap
x
14
process_zarray
M
1
n
n
x
14
process_zarray
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
10
EmptyArray
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1e5
I
0
I
1e6
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
x
14
process_zsuper
M
1
n
n
x
14
process_zsuper
i
31
45
0
1
43
2
13
71
3
47
9
25
47
49
4
0
13
20
0
47
49
5
1
15
8
30
20
0
49
3
1
11
I
4
I
1
I
1
I
0
I
1
n
p
6
x
3
AST
n
x
6
ZSuper
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1e9
I
0
I
1ea
I
1f
x
26
lib/melbourne/processor.rb
p
1
x
4
line
p
201
I
2
I
3
I
10
I
7
I
1e
I
e
I
2c
I
13
I
3a
I
1a
I
48
I
1e
I
56
I
22
I
64
I
26
I
72
I
2a
I
80
I
2e
I
8e
I
32
I
9c
I
3a
I
aa
I
3e
I
b8
I
42
I
c6
I
46
I
d4
I
4a
I
e2
I
54
I
f0
I
58
I
fe
I
6f
I
10c
I
77
I
11a
I
7b
I
128
I
7f
I
136
I
87
I
144
I
8b
I
152
I
8f
I
160
I
93
I
16e
I
97
I
17c
I
9b
I
18a
I
9f
I
198
I
a3
I
1a6
I
a7
I
1b4
I
ab
I
1c2
I
af
I
1d0
I
b3
I
1de
I
b7
I
1ec
I
bb
I
1fa
I
bf
I
208
I
c3
I
216
I
c7
I
224
I
cf
I
232
I
d3
I
240
I
ec
I
24e
I
f0
I
25c
I
f4
I
26a
I
f8
I
278
I
fc
I
286
I
100
I
294
I
106
I
2a2
I
10a
I
2b0
I
10e
I
2be
I
112
I
2cc
I
116
I
2da
I
11a
I
2e8
I
11f
I
2f6
I
123
I
304
I
127
I
312
I
12b
I
320
I
12f
I
32e
I
133
I
33c
I
137
I
34a
I
13b
I
358
I
13f
I
366
I
143
I
374
I
147
I
382
I
14b
I
390
I
14f
I
39e
I
153
I
3ac
I
158
I
3ba
I
162
I
3c8
I
166
I
3d6
I
16a
I
3e4
I
16e
I
3f2
I
172
I
400
I
176
I
40e
I
17a
I
41c
I
17e
I
42a
I
182
I
438
I
186
I
446
I
18a
I
454
I
18e
I
462
I
192
I
470
I
196
I
47e
I
19e
I
48c
I
1a2
I
49a
I
1a6
I
4a8
I
1aa
I
4b6
I
1ae
I
4c4
I
1b2
I
4d2
I
1b6
I
4e0
I
1ba
I
4ee
I
1be
I
4fc
I
1c2
I
50a
I
1cc
I
518
I
1d0
I
526
I
1d5
I
534
I
1d9
I
542
I
1dd
I
550
I
1e1
I
55e
I
1e5
I
56c
I
1e9
I
57a
x
26
lib/melbourne/processor.rb
p
0
x
13
attach_method
x
11
Melbourne19
n
M
1
n
n
x
11
Melbourne19
i
128
5
66
99
7
0
7
1
65
67
49
2
0
49
3
4
15
99
7
4
7
5
65
67
49
2
0
49
3
4
15
99
7
6
7
7
65
67
49
2
0
49
3
4
15
99
7
8
7
9
65
67
49
2
0
49
3
4
15
99
7
10
7
11
65
67
49
2
0
49
3
4
15
99
7
12
7
13
65
67
49
2
0
49
3
4
15
99
7
14
7
15
65
67
49
2
0
49
3
4
15
99
7
16
7
17
65
67
49
2
0
49
3
4
15
99
7
18
7
19
65
67
49
2
0
49
3
4
11
I
5
I
0
I
0
I
0
I
0
n
p
20
x
12
process_args
M
1
n
n
x
12
process_args
i
51
45
0
1
43
2
13
71
3
47
9
35
47
49
4
0
13
20
0
20
1
20
2
20
3
20
4
20
5
47
49
5
6
15
8
50
20
0
20
1
20
2
20
3
20
4
20
5
49
3
6
11
I
e
I
6
I
6
I
0
I
6
n
p
6
x
3
AST
n
x
17
FormalArguments19
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1ef
I
0
I
1f0
I
33
x
26
lib/melbourne/processor.rb
p
6
x
4
line
x
8
required
x
8
optional
x
5
splat
x
4
post
x
5
block
x
17
method_visibility
x
15
add_defn_method
x
18
process_block_pass
M
1
n
n
x
18
process_block_pass
i
39
45
0
1
43
2
13
71
3
47
9
29
47
49
4
0
13
20
0
20
1
20
2
47
49
5
3
15
8
38
20
0
20
1
20
2
49
3
3
11
I
8
I
3
I
3
I
0
I
3
n
p
6
x
3
AST
n
x
11
BlockPass19
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
1f3
I
0
I
1f4
I
27
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
9
arguments
x
4
body
x
12
process_iter
M
1
n
n
x
12
process_iter
i
200
20
2
13
9
11
15
20
2
49
0
0
13
10
17
15
35
0
19
3
15
1
19
4
15
20
3
49
1
0
45
2
3
43
4
49
5
1
9
51
20
2
49
0
0
49
6
0
19
4
8
52
1
15
20
4
9
60
1
8
102
45
2
7
43
8
13
71
9
47
9
90
47
49
10
0
13
20
0
1
1
1
1
1
47
49
11
6
15
8
100
20
0
1
1
1
1
1
49
9
6
19
4
15
20
3
49
12
0
13
78
12
49
13
1
9
122
15
1
19
5
8
148
13
79
12
49
13
1
9
143
15
20
2
49
0
0
49
6
0
19
5
8
148
15
20
2
19
5
15
20
1
45
2
14
43
15
13
71
9
47
9
180
47
49
10
0
13
20
0
20
4
20
5
47
49
11
3
15
8
189
20
0
20
4
20
5
49
9
3
13
18
2
49
16
1
15
15
20
1
11
I
e
I
6
I
3
I
0
I
3
n
p
17
x
5
array
x
5
first
x
3
AST
n
x
15
FormalArguments
x
8
kind_of?
x
5
shift
n
x
17
FormalArguments19
x
3
new
x
8
allocate
x
10
initialize
x
4
size
x
3
===
n
x
6
Iter19
x
6
block=
p
39
I
-1
I
1f7
I
0
I
1f8
I
14
I
1f9
I
18
I
1fb
I
27
I
1fc
I
33
I
1fb
I
34
I
0
I
35
I
1ff
I
3c
I
200
I
66
I
0
I
67
I
203
I
6c
I
204
I
75
I
205
I
7a
I
206
I
83
I
207
I
90
I
209
I
94
I
0
I
95
I
20c
I
c5
I
20d
I
c8
x
26
lib/melbourne/processor.rb
p
6
x
4
line
x
11
method_send
x
5
scope
x
3
ary
x
9
arguments
x
4
body
x
14
process_lambda
M
1
n
n
x
14
process_lambda
i
168
20
1
49
0
0
49
1
0
19
2
15
20
1
49
0
0
49
2
0
79
83
3
9
36
20
1
49
0
0
49
1
0
19
3
8
40
20
1
19
3
15
45
4
5
43
6
13
71
7
47
9
66
47
49
8
0
13
20
0
47
49
9
1
15
8
71
20
0
49
7
1
19
4
15
45
4
10
43
11
13
71
7
47
9
104
47
49
8
0
13
20
0
20
4
7
12
2
47
49
9
4
15
8
114
20
0
20
4
7
12
2
49
7
4
19
5
15
20
5
45
4
13
43
14
13
71
7
47
9
148
47
49
8
0
13
20
0
20
2
20
3
47
49
9
3
15
8
157
20
0
20
2
20
3
49
7
3
13
18
2
49
15
1
15
15
20
5
11
I
c
I
6
I
2
I
0
I
2
n
p
16
x
5
array
x
5
shift
x
4
size
x
2
==
x
3
AST
n
x
4
Self
x
3
new
x
8
allocate
x
10
initialize
n
x
4
Send
x
6
lambda
n
x
6
Iter19
x
6
block=
p
21
I
-1
I
210
I
0
I
211
I
b
I
212
I
18
I
213
I
24
I
215
I
28
I
0
I
29
I
218
I
4a
I
219
I
75
I
21b
I
a5
I
21c
I
a8
x
26
lib/melbourne/processor.rb
p
6
x
4
line
x
5
scope
x
9
arguments
x
4
body
x
8
receiver
x
11
method_send
x
14
process_number
M
1
n
n
x
14
process_number
i
99
20
1
13
45
0
1
12
49
2
1
9
49
15
45
3
4
43
5
13
71
6
47
9
40
47
49
7
0
13
20
0
20
1
47
49
8
2
15
8
47
20
0
20
1
49
6
2
8
98
13
45
9
10
12
49
2
1
9
96
15
45
3
11
43
12
13
71
6
47
9
87
47
49
7
0
13
20
0
20
1
47
49
8
2
15
8
94
20
0
20
1
49
6
2
8
98
15
1
11
I
6
I
2
I
2
I
0
I
2
n
p
13
x
6
Fixnum
n
x
3
===
x
3
AST
n
x
13
FixnumLiteral
x
3
new
x
8
allocate
x
10
initialize
x
6
Bignum
n
n
x
13
NumberLiteral
p
17
I
-1
I
21f
I
0
I
220
I
2
I
221
I
d
I
222
I
31
I
223
I
3c
I
224
I
61
I
220
I
62
I
0
I
63
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
5
value
x
15
process_opt_arg
M
1
n
n
x
15
process_opt_arg
i
35
45
0
1
43
2
13
71
3
47
9
27
47
49
4
0
13
20
0
20
1
47
49
5
2
15
8
34
20
0
20
1
49
3
2
11
I
6
I
2
I
2
I
0
I
2
n
p
6
x
3
AST
n
x
5
Block
x
3
new
x
8
allocate
x
10
initialize
p
5
I
-1
I
228
I
0
I
229
I
23
x
26
lib/melbourne/processor.rb
p
2
x
4
line
x
9
arguments
x
15
process_postexe
M
1
n
n
x
15
process_postexe
i
148
45
0
1
43
2
13
71
3
47
9
58
47
49
4
0
13
20
0
45
0
5
43
6
13
71
3
47
9
43
47
49
4
0
13
20
0
47
49
7
1
15
8
48
20
0
49
3
1
7
8
2
47
49
7
4
15
8
96
20
0
45
0
9
43
6
13
71
3
47
9
85
47
49
4
0
13
20
0
47
49
7
1
15
8
90
20
0
49
3
1
7
8
2
49
3
4
19
2
15
20
2
45
0
10
43
11
13
71
3
47
9
129
47
49
4
0
13
20
0
1
20
1
47
49
7
3
15
8
137
20
0
1
20
1
49
3
3
13
18
2
49
12
1
15
15
20
2
11
I
9
I
3
I
2
I
0
I
2
n
p
13
x
3
AST
n
x
4
Send
x
3
new
x
8
allocate
n
x
4
Self
x
10
initialize
x
7
at_exit
n
n
x
4
Iter
x
6
block=
p
9
I
-1
I
22c
I
0
I
22d
I
63
I
22e
I
91
I
22f
I
94
x
26
lib/melbourne/processor.rb
p
3
x
4
line
x
4
body
x
4
node
x
13
process_scope
M
1
n
n
x
13
process_scope
i
250
20
2
13
45
0
1
43
2
12
49
3
1
9
91
15
20
2
49
4
0
45
0
5
43
6
49
7
1
9
41
20
1
9
37
1
8
39
1
11
8
42
1
15
45
0
8
43
9
13
71
10
47
9
75
47
49
11
0
13
20
0
20
2
49
4
0
35
1
47
49
12
2
15
8
87
20
0
20
2
49
4
0
35
1
49
10
2
19
2
8
222
13
45
0
13
43
9
12
49
3
1
9
169
15
20
2
49
14
0
19
3
15
20
3
49
15
0
79
85
16
13
9
157
15
20
3
49
17
0
45
0
18
43
2
49
7
1
13
9
157
15
20
3
49
17
0
49
4
0
45
0
19
43
6
49
7
1
9
166
20
3
49
20
0
8
167
1
8
222
13
1
12
49
3
1
9
181
15
1
8
222
15
45
0
21
43
9
13
71
10
47
9
211
47
49
11
0
13
20
0
20
2
35
1
47
49
12
2
15
8
220
20
0
20
2
35
1
49
10
2
19
2
15
20
1
13
9
231
15
20
2
9
245
20
2
49
14
0
20
1
49
22
1
8
246
1
15
20
2
11
I
8
I
4
I
3
I
0
I
3
n
p
23
x
3
AST
n
x
5
Begin
x
3
===
x
6
rescue
n
x
10
NilLiteral
x
8
kind_of?
n
x
5
Block
x
3
new
x
8
allocate
x
10
initialize
n
x
5
array
x
4
size
x
1
>
x
5
first
n
n
x
5
shift
n
x
7
unshift
p
53
I
-1
I
232
I
0
I
233
I
2
I
234
I
f
I
235
I
1e
I
236
I
27
I
0
I
29
I
235
I
2a
I
0
I
2b
I
238
I
5b
I
239
I
68
I
23a
I
70
I
23b
I
7c
I
23c
I
8d
I
23d
I
9f
I
23e
I
a6
I
23c
I
a7
I
0
I
a9
I
240
I
b2
I
244
I
b6
I
243
I
de
I
0
I
df
I
246
I
e9
I
247
I
f5
I
246
I
f6
I
0
I
f7
I
24a
I
fa
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
9
arguments
x
4
body
x
3
ary
x
13
process_super
M
1
n
n
x
13
process_super
i
93
20
1
45
0
1
43
2
49
3
1
9
37
20
1
19
2
15
20
2
49
4
0
19
1
15
20
2
1
13
18
2
49
5
1
15
8
40
1
19
2
15
45
0
6
43
7
13
71
8
47
9
68
47
49
9
0
13
20
0
20
1
47
49
10
2
15
8
75
20
0
20
1
49
8
2
19
3
15
20
3
20
2
13
18
2
49
11
1
15
15
20
3
11
I
8
I
4
I
2
I
0
I
2
n
p
12
x
3
AST
n
x
9
BlockPass
x
8
kind_of?
x
9
arguments
x
10
arguments=
n
x
5
Super
x
3
new
x
8
allocate
x
10
initialize
x
6
block=
p
21
I
-1
I
24d
I
0
I
24e
I
c
I
24f
I
11
I
250
I
19
I
251
I
25
I
253
I
28
I
0
I
29
I
256
I
4e
I
257
I
5a
I
258
I
5d
x
26
lib/melbourne/processor.rb
p
4
x
4
line
x
9
arguments
x
5
block
x
4
node
p
19
I
2
I
1ef
I
10
I
1f3
I
1e
I
1f7
I
2c
I
210
I
3a
I
21f
I
48
I
228
I
56
I
22c
I
64
I
232
I
72
I
24d
I
80
x
26
lib/melbourne/processor.rb
p
0
p
5
I
2
I
2
I
1d
I
1ee
I
3a
x
26
lib/melbourne/processor.rb
p
0
x
13
attach_method
p
3
I
0
I
1
I
1c
x
26
lib/melbourne/processor.rb
p
0
